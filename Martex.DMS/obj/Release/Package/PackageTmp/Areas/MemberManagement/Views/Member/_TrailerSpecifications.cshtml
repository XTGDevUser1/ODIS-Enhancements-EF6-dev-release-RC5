@model Martex.DMS.DAL.Vehicle
@using Kendo.Mvc.UI;
@{
    ViewBag.Title = "_TrailerSpecifications";
    string suffixMembershipID = ViewData["MembershipID"].ToString();
}
<script type="text/javascript">
    function TrailerOtherShowOrHide(uniqueID) {
        var trailerTypeText = $('#TrailerTypeID_' + uniqueID).data('kendoComboBox').text();
        if (trailerTypeText == 'Other') {
            $('#divTrailerTypeOther_' + uniqueID).show();
        }
        else {
            $('#divTrailerTypeOther_' + uniqueID).hide();
        }
    }

    function TrailerBallSizeOtherShowOrhide(uniqueID) {
        var ballSizeText = $('#TrailerBallSize_' + uniqueID).data('kendoComboBox').text();
        if (ballSizeText == 'Other') {
            $('#divBallSizeOther_' + uniqueID).show();
        }
        else {
            $('#divBallSizeOther_' + uniqueID).hide();
        }
    }

    function HitchTypeIDOtherShowOrHide(uniqueID) {
        var ballSizeText = $('#HitchTypeID_' + uniqueID).data('kendoComboBox').text();
        if (ballSizeText == 'Other') {
            $('#divHitchTypeOther_' + uniqueID).show();
        }
        else {
            $('#divHitchTypeOther_' + uniqueID).hide();
        }
    }

    function onComboBoxChange_TrailerType(e, uniqueID) {
        var combo = e.sender;
        // PV: Validate user input on Telerik dropdowns
        if (!IsUserInputValidForChangeOnKendoCombo(combo)) {
            e.preventDefault();
        }
        //PV

        TrailerOtherShowOrHide(uniqueID);
    }

    function onComboBoxChange_BallSize(e, uniqueID) {
        var combo = e.sender;
        // PV: Validate user input on Telerik dropdowns
        if (!IsUserInputValidForChangeOnKendoCombo(combo)) {
            e.preventDefault();
        }
        //PV
        TrailerBallSizeOtherShowOrhide(uniqueID);
    }

    function onComboBoxChange_HitchType(e, uniqueID) {
        var combo = e.sender;
        // PV: Validate user input on Telerik dropdowns
        if (!IsUserInputValidForChangeOnKendoCombo(combo)) {
            e.preventDefault();
        }
        //PV
        HitchTypeIDOtherShowOrHide(uniqueID);
    }

    

</script>
<div class="four-columns float-left large-margin-left">
    <fieldset class="fieldset">
        <legend class="legend">Specifications</legend>
        <div class="with-small-padding">
            <div class="button-height inline-label small-margin-bottom">
                <label for="TrailerType" class="label">
                    Trailer Type<span class="spanstar">*</span></label>
                @( Html.Kendo().ComboBox()
                               .BindTo(ViewData[Martex.DMS.ActionFilters.StaticData.TrailerType.ToString()] as IEnumerable<SelectListItem>)
                               .Name("TrailerTypeID")
                               .Suggest(true)
                               .Filter(FilterType.StartsWith).MinLength(0)
                                       .Events(events => events.Change(@<text> function(e){ return onComboBoxChange_TrailerType(e,'@suffixMembershipID'); }</text>))
                                                      .SelectedIndex(0)
                                                      .HighlightFirst(true)
                                                      .Value(Model.TrailerTypeID != null ? Model.TrailerTypeID.ToString() : string.Empty)
                                                      .HtmlAttributes(new { id = "TrailerTypeID_" + suffixMembershipID })
                                        )
            </div>
            <div id="divTrailerTypeOther_@suffixMembershipID" style="display: none;">
                <p class="button-height inline-label small-margin-bottom">
                    <label for="MakeOther" class="label">
                        if Other<span class="spanstar">*</span></label>
                    @Html.TextBoxFor(t => t.TrailerTypeOther, null, new { @class = "validate[maxSize[50]] input full-width2", id = "TrailerTypeOther_" + suffixMembershipID })
                </p>
            </div>
            <div class="button-height small-margin-bottom inline-label">
                <label for="Length" class="label">
                    Length</label>
                @Html.TextBoxFor(v => v.Length, new { @class = "validate[custom[integer] maxSize[10]] input full-width2", id = "Length_" + suffixMembershipID })
                
            </div>
            <div>
                <p class="button-height inline-label small-margin-bottom">
                    <label for="Height" class="label">
                        Height</label>
                   @Html.TextBoxFor(v => v.Height, new { @class = "validate[maxSize[5]] input full-width2", id = "Height_" + suffixMembershipID })
                </p>
            </div>
            <div>
                <p class="button-height inline-label small-margin-bottom">
                    <label for="Serial Number" class="label">
                        Serial Number</label>
                    @Html.TextBoxFor(t => t.SerialNumber, null, new { @class = "validate[maxSize[50]] input full-width2", id = "SerialNumber_" + suffixMembershipID })
                </p>
            </div>
            <div class="button-height inline-label small-margin-bottom">
                <label for="Axies" class="label">
                    Axles</label>
                @( Html.Kendo().ComboBox()
                       .BindTo(ViewData[Martex.DMS.ActionFilters.StaticData.Axles.ToString()] as IEnumerable<SelectListItem>)
                       .Name("NumberofAxles")
                       .Suggest(true)
                       .Filter(FilterType.StartsWith).MinLength(0)
                       .Events(events => events.Change("ValidateInputForKendoCombo"))
                       .SelectedIndex(0)
                       .HighlightFirst(true)
                       .Value(Model.NumberofAxles == null ? string.Empty : Model.NumberofAxles.Value.ToString())
                       .HtmlAttributes(new { id = "NumberofAxles_" + suffixMembershipID })
                 )
            </div>
            <div class="button-height inline-label small-margin-bottom">
                <label for="HitchType" class="label">
                    Hitch Type<span class="spanstar">*</span></label>
                @( Html.Kendo().ComboBox()
                               .BindTo(ViewData[Martex.DMS.ActionFilters.StaticData.HitchType.ToString()] as IEnumerable<SelectListItem>)
                               .Name("HitchTypeID")
                               .Suggest(true)
                               .Filter(FilterType.StartsWith).MinLength(0)
                                .Events(events => events.Change(@<text> function(e){ return onComboBoxChange_HitchType(e,'@suffixMembershipID'); }</text>))
                                .SelectedIndex(0)
                                .HighlightFirst(true)
                                .Value(Model.HitchTypeID == null ? string.Empty : Model.HitchTypeID.Value.ToString())
                                .HtmlAttributes(new { id = "HitchTypeID_" + suffixMembershipID })
                                       )
            </div>
            <div id="divHitchTypeOther_@suffixMembershipID" style="display: none;">
                <p class="button-height inline-label small-margin-bottom">
                    <label for="HitchTypeOther" class="label">
                        if Other<span class="spanstar">*</span></label>
                    @Html.TextBoxFor(t => t.HitchTypeOther, null, new { @class = "validate[maxSize[50]] input", id = "HitchTypeOther_" + suffixMembershipID })
                </p>
            </div>
            <div class="button-height inline-label small-margin-bottom">
                <label for="BallSize" class="label">
                    Ball Size<span class="spanstar">*</span></label>
                @( Html.Kendo().ComboBox()
                       .BindTo(ViewData[Martex.DMS.ActionFilters.StaticData.BallSize.ToString()] as IEnumerable<SelectListItem>)
                       .Name("TrailerBallSize")
                       .Suggest(true)
                       .Filter(FilterType.StartsWith).MinLength(0)
                               .Events(events => events.Change(@<text> function(e){ return onComboBoxChange_BallSize(e,'@suffixMembershipID'); }</text>))
                                      .SelectedIndex(0)
                                      .HighlightFirst(true)
                                      .Value(Model.TrailerBallSize)
                                      .HtmlAttributes(new { id = "TrailerBallSize_" + suffixMembershipID })
                                )
            </div>
            <div id="divBallSizeOther_@suffixMembershipID" style="display: none;">
                <p class="button-height inline-label small-margin-bottom">
                    <label for="BallSizeOther" class="label">
                        if Other<span class="spanstar">*</span></label>
                    @Html.TextBoxFor(t => t.TrailerBallSizeOther, null, new { @class = "validate[maxSize[50]] input", id = "TrailerBallSizeOther_" + suffixMembershipID })
                </p>
            </div>
        </div>
    </fieldset>
</div>
<script type="text/javascript">
    $(function () {
        setTimeout(function () {
            TrailerOtherShowOrHide('@suffixMembershipID');
            TrailerBallSizeOtherShowOrhide('@suffixMembershipID');
            HitchTypeIDOtherShowOrHide('@suffixMembershipID');
        }, 1500)
    });
</script>
