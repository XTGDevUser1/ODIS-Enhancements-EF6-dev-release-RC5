@using Martex.DMS.Areas.Application.Models;
@using Kendo.Mvc.UI;
@model List<Martex.DMS.DAL.Vehicles_Result>
@{
    var isFordClient = "Ford".Equals(DMSCallContext.ClientName, StringComparison.CurrentCultureIgnoreCase);
}
<script type="text/javascript">
    var notificationMsg = "The vehicle information already entered on this page will be lost.  Do you want to add a new vehicle?";
    var vehicleId = null;
    var tabName = null;
    var fromCase = null;


    function SetWarrantyFieldValues(vehicleTypeId, year, make, model) {

        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetWarrantyDetails", "Vehicle", new { area = "Application" })',
            data: { vehicleTypeID: vehicleTypeId, year: year, make: make, model: model },
            traditional: true,
            cache: false,
            async: true,
            success: function (msg) {
                if (msg.Data && msg.Data != null) {
                    var warrantyDetails = msg.Data;
                    /*
                    wi.WarrantyMileage = vehicleMakeModel.WarrantyMileage;
                    wi.WarrantyMileageUOM = vehicleMakeModel.WarrantyMileageUOM;
                    wi.WarrantyPeriod = vehicleMakeModel.WarrantyPeriod;
                    wi.WarrantyPeriodUOM = vehicleMakeModel.WarrantyPeriodUOM;
                    */
                    if ($("#WarrantyMileage").length > 0) {
                        $("#WarrantyMileage").data("kendoNumericTextBox").value(warrantyDetails.WarrantyMileage != null ? warrantyDetails.WarrantyMileage : "");
                        $("#WarrantyPeriod").data("kendoNumericTextBox").value(warrantyDetails.WarrantyPeriod != null ? warrantyDetails.WarrantyPeriod : "");
                        $("#spMileageUOM").html(warrantyDetails.WarrantyMileageUOM != null ? warrantyDetails.WarrantyMileageUOM : "");

                        if (warrantyDetails.WarrantyMileageUOM != null) {
                            var radios = $('input[name="MileageUOM"]');
                            if (warrantyDetails.WarrantyMileageUOM == "Miles") {

                                $(radios[0]).attr("checked", true).parent().addClass("checked");
                                $(radios[1]).attr("checked", false).parent().removeClass("checked");
                            }
                            else {
                                $(radios[1]).attr("checked", true).parent().addClass("checked");
                                $(radios[0]).attr("checked", false).parent().removeClass("checked");
                            }
                        }
                        $("#WarrantyPeriodUOM").data("kendoComboBox").value(warrantyDetails.WarrantyPeriodUOM ? warrantyDetails.WarrantyPeriodUOM : "");
                        // TFS : 278 - If the End mileage is blank, set it to Warranty mileage.
                        var $warrantyMiles = $("#EndMileage").data("kendoNumericTextBox");
                        if ($.trim($warrantyMiles.value()).length == 0) {
                            $warrantyMiles.value(warrantyDetails.WarrantyMileage != null ? warrantyDetails.WarrantyMileage : "");
                        }

                    }

                }
                //console.log(msg);
            }
        });


    }

    $("#GrdVehicles").delegate("tbody>tr", "dblclick", function () {

        if (globalDirtyContainer.length > 0) {
            $.modal.confirm(notificationMsg, function () {
                LoadVehiclesTypes(tabName, vehicleId, fromCase);

                CleanAllContainers();

            }, function () {

            });
        }
        else {
            LoadVehiclesTypes(tabName, vehicleId, fromCase);
        }
    });

    function onRowSelected(e) {

        $.map(this.select(), function (item) {
            vehicleId = $(item.cells[0]).html();
            tabName = $(item.cells[1]).html();
            fromCase = $(item.cells[2]).html();
        });
    }

    function IsFormDirtyCheck() {
        var isFormDirty = false;
        if (globalDirtyContainer.length > 0 && !confirm(notificationMsg)) {
            isFormDirty = true;
        }
        else {
            CleanAllContainers();
        }
        return isFormDirty;
    }

    function ConfirmNotification() {
        var returnValue = false;
        var notificationMsg = "The vehicle information already entered on this page will be lost.  Do you want to add a new vehicle?";
        $.modal.confirm(notificationMsg, function () {
            returnValue = true;
        }, function () {
            returnValue = false;
        });

        return returnValue;
    }
    function checkVIN(field, rules, i, options) {
        var len = field.val().length;
        if (len < 17 || len > 17) {
            return "VIN must be 17 characters";
        }
    }

    function RVCheckVIN(field, rules, i, options) {

        var len = field.val().length;
        if (len < 9) {
            return "VIN Minimum value is 9";
        }
        else if (len > 17) {
            return "VIN Maximum value is 17";
        }
    }

</script>
@{

    var activeProgrameType = ViewBag.ActiveProgrameVehicleType;

    var activeButtons = activeProgrameType.RecordCount;

    var IsShowCVAllowed = ViewBag.ShowCommercialVehicle;

    string lastUpdatedTab = DMSCallContext.LastUpdatedVehicleType;
    string AutoButtonName = /*IsShowCVAllowed ? "Auto/Commercial" :*/ "Auto";
    string RVButtonName = IsShowCVAllowed ? "RV/Commercial" : "RV";
}
@Html.Partial("_ServiceRequestExceptions", ViewData)
<div class="with-padding">
    <div class="columns">
        @Html.Hidden("ShowCommercialVehicle", (bool)ViewBag.ShowCommercialVehicle)
        <div class="twelve-columns" id="VehicleTab">
        </div>
        <!-- Grid row -->
        <div class="new-row twelve-columns">
            <div id="tab-4">
                @if (Model.Count > 0)
                {
                    var allVins = new List<KeyValuePair<int, string>>();
                    int i = 0;
                    Model.ForEach(x =>
                    {
                        allVins.Add(new KeyValuePair<int, string>(i++, x.VIN));
                    });

                    var strAllVins = new System.Web.Script.Serialization.JavaScriptSerializer().Serialize(allVins);
                    @Html.Hidden("hdnAllVINs", strAllVins)

                    <div class="with-padding boxed  silver-gradient ">
                        <h3 class="underline">
                            Vehicle History (Select a previous vehicle)
                        </h3>
                        <div class="clear">
                        </div>
                        @(Html.Kendo().Grid(Model)
                    .Name("GrdVehicles")
                    .Columns(columns =>
                    {
                        columns.Bound(v => v.ID).Hidden();
                        columns.Bound(v => v.VehicleTypeName).Title("Type");
                        columns.Bound(v => v.FromCase).Hidden();
                        columns.Bound(v => v.Year);
                        columns.Bound(v => v.Make);
                        columns.Bound(v => v.Model);
                        columns.Bound(v => v.Color);
                        columns.Bound(v => v.LicenseNumber);
                        columns.Bound(v => v.VIN);
                        columns.Bound(v => v.Source);
                        columns.Bound(v => v.ModifyDate).Format("{0:MM/dd/yyyy}");
                    })
                     .HtmlAttributes(new { style = "min-height:100px" })
                     .DataSource(datasource => datasource
                     .Server()
                     .Model(u => u.Id(p => p.ID))

                   )
                .Events(events => events.Change("onRowSelected"))
                .Selectable()
                .Scrollable()
                        )
                    </div>
                }
                <div class="new-row six-colums">
                    <fieldset class="fieldset">
                        <legend class="legend">Select the vehicle type to enter </legend>
                        <div class="with-padding">
                            @if (activeProgrameType.IsAuto)
                            {

                                <button id="btnAuto" class="button huge green-gradient  vehicle" type="button" value="Auto">
                                    @AutoButtonName
                                </button>

                            }
                            else
                            {
                                <button id="btnAutoDisabled" class="button huge green-gradient " type="button" disabled="disabled">
                                    Auto
                                </button>
                            }
                            @if (activeProgrameType.IsRV)
                            {
                                <button id="btnRV" class="button huge green-gradient  vehicle" type="button" value="RV">
                                    @RVButtonName
                                </button>

                            }
                            else
                            {
                                <button id="btnRVDisabled" class="button huge green-gradient " type="button" disabled="disabled">
                                    @RVButtonName
                                </button>
                            }
                            @if (activeProgrameType.Motorcycle)
                            {
                                <button id="btnMotorcycle" class="button huge green-gradient  vehicle" type="button"
                                        value="Motorcycle">
                                    Motorcycle
                                </button>


                            }
                            else
                            {
                                <button id="btnMotorcycleDisabled" class="button huge green-gradient " type="button"
                                        disabled="disabled" value="Motorcycle">
                                    Motorcycle
                                </button>


                            }
                            @if (activeProgrameType.Trailer)
                            {
                                <button id="btnTrailer" class="button huge green-gradient  vehicle" type="button"
                                        value="Trailer">
                                    Trailer
                                </button>

                            }
                            else
                            {
                                <button id="btnTrailerDisabled" class="button green-gradient huge " type="button"
                                        value="Trailer" disabled="disabled">
                                    Trailer
                                </button>

                            }
                        </div>
                    </fieldset>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    var vehicleTypeSelectionWindow = null;
    $(function () {        
        $('#btnAuto').live("click", function (e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                IsAddAllowed("Auto", autoCount, function () { LoadVehiclesTypes("Auto", null, 0); });
            }

        });
        $('#btnRV').live("click", function (e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                IsAddAllowed("RV", rvCount, function () { LoadVehiclesTypes("RV", null, 0); });
            }

        });
        $('#btnMotorcycle').live("click", function (e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                IsAddAllowed("Motorcycle", motorcycleCount, function () { LoadVehiclesTypes("Motorcycle", null, 0); });
            }

        });
        $('#btnTrailer').live("click", function (e) {
            if (!e.isDefaultPrevented()) {
                e.preventDefault();
                IsAddAllowed("Trailer", trailerCount, function () { LoadVehiclesTypes("Trailer", null, 0); });
            }

        });

    });

    function IsAddAllowed(vehicleType, existingCount, fn) {

        var retVal = !IsFormDirtyCheck();
        if (retVal) {
            var maxCount;
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetMaxAllowedVehicles", "Vehicle", new { area = "Application" })',
                data: { vehicleType: vehicleType },
                traditional: true,
                cache: false,
                async: false,
                success: function (msg) {
                    if (msg.Data != null && msg.Data <= existingCount) {
                        maxCount = msg.Data;
                        retVal = false;
                    }
                }
            });

            if (!retVal) {
                var notificationMsg = "This program has a limit of " +
                                    maxCount +
                                   " for vehicle type " +
                                   vehicleType +
                                   ". The member is not allowed to get service on another vehicle." +
                                   " Click OK to go back and select a vehicle from the list or to deny service."
                openAlertMessage(notificationMsg);
            }
            else {
                fn();
            }
        }
    }
    function LoadVehiclesTypes(tabName, id, fromCase) {
        $.ajax({
            type: 'GET',
            url: '@Url.Action("IsVehicleTypeExists", "Vehicle", new { area = "Application" })',
            data: { tabName: tabName, id: id, fromCase: fromCase },
            traditional: true,
            cache: false,
            async: true,
            success: function (msg) {
                if (msg.Data.IsVehicleTypeExists == "true") {
                    $.ajax({
                        type: 'GET',
                        url: '@Url.Action("_VehicleTab", "Vehicle", new { area = "Application" })',
                        data: { tabName: tabName, id: id, fromCase: fromCase },
                        traditional: true,
                        cache: false,
                        async: true,
                        success: function (msg) {
                            $('#VehicleTab').html(""); $('#VehicleTab').html(msg); $(document).scrollTop(0);
                        }
                    });
                }
                else {
                    $.ajax({
                        type: 'GET',
                        url: '@Url.Action("VehicleTypeSelection", "Vehicle", new { area = "Application" })',
                        data: { tabName: tabName, id: id, fromCase: fromCase },
                        traditional: true,
                        cache: false,
                        async: true,
                        success: function (msg) {
                            vehicleTypeSelectionWindow = $("<div id='vehicleTypeSelectionWindow' />").appendTo(document.body);
                            document.dialogResult = null;
                            vehicleTypeSelectionWindow.kendoWindow({
                                title: "Vehicle Type Selection",
                                modal: true,
                                width: 600,
                                height: 250,
                                actions: [],
                                deactivate: function () {
                                    this.destroy();
                                },
                                close: function (e) {
                                    return true;
                                }
                            });
                            vehicleTypeSelectionWindow.data('kendoWindow').content(msg).center().open();
                        }
                    });

                }
            }
        });


    }

    function SaveForm(formId, tabName) {
        var retVal = false;
        var $form = $("#" + formId);
        if ($form.validationEngine('validate') == false) {
            return retVal;
        }
        else {
            $form.validationEngine('hide');

        }
        if ('@isFordClient' == 'True' && (tabName == "RV" || tabName == "Auto")) {
            // var formdata = $form.serializearray();
            var $currentMileagePicker = $("#VehicleCurrentMileage").data("kendoNumericTextBox");
            if ($currentMileagePicker != undefined && $currentMileagePicker != null) {
                var currentMileage = $currentMileagePicker.value();
                if ($.trim(currentMileage).length == 0) {
                    ShowValidationMessage($form.find("#VehicleCurrentMileage").parents(".k-numerictextbox"), "* Mileage field is required.");
                    //ShowValidationMessage($form.find("#WarrantyEndDate"), "To Date must be after the From Date.");
                    return false;
                }
                else {
                    HideValidationMessage($form.find("#VehicleCurrentMileage").parents(".k-numerictextbox"));
                }
            }
            if ($.trim($form.find("#VIN").val()).length == 0) {
                ShowValidationMessage($form.find("#VIN"), "VIN field is required");
                return false;
            }
                //            else if ($.trim($form.find("#VIN").val()).length == 0) {
                //                ShowValidationMessage($form.find("#VIN"), "VIN field is required");
                //                return false;
                //            }
                //            else if ($.trim($("#CurrentMileage").val()).length == 0) {
                //                ShowValidationMessage($("#CurrentMileage"), "Mileage field is required");
                //                HideValidationMessage($form.find("#VIN"));
                //                return false;
                //            }
            else {
                HideValidationMessage($form.find("#VIN"));
                //HideValidationMessage($("#CurrentMileage"));
            }
        }
        var validationArray = {};
        $.ajax({
            type: 'POST',
            url: '@Url.Action("_GetValidationRequiredFields", "Vehicle", new { area = "Application" })',
            data: formdata,
            traditional: true,
            cache: false,
            async: false,
            success: function (msg) {
                validationArray = msg.Data;
            }
        });
        var isVehicleLicenseStateRequired = false;
        var isVehicleLicenseNumberRequired = false;
        $.each(validationArray, function (i, item) {
            switch (item.Name) {
                case "VehicleLicenseStateRequired":
                    {
                        isVehicleLicenseStateRequired = true;
                        break;
                    }
                case "VehicleLicenseNumberRequired":
                    {
                        isVehicleLicenseNumberRequired = true;
                        break;
                    }
            }
        });

        if (isVehicleLicenseStateRequired && isVehicleLicenseNumberRequired &&
          $.trim($("#LicenseState").data('kendoComboBox').value()).length == 0
           && $.trim($form.find("#LicenseNumber").val()).length == 0) {
            ShowValidationMessage($form.find("#LicenseState_input"), "License State field is required");
            ShowValidationMessage($form.find("#LicenseNumber"), "License Number field is required");
            return false;
        }
        else if (isVehicleLicenseStateRequired && $.trim($("#LicenseState").data('kendoComboBox').value()).length == 0) {
            ShowValidationMessage($form.find('input[name="LicenseState_input"]'), "License State field is required");
            HideValidationMessage($form.find("#LicenseNumber"));
            return false;
        }
        else if (isVehicleLicenseNumberRequired && $.trim($form.find("#LicenseNumber").val()).length == 0) {
            ShowValidationMessage($form.find("#LicenseNumber"), "License Number field is required");
            HideValidationMessage($form.find('input[name="LicenseState_input"]'));
            return false;
        }
        else {
            HideValidationMessage($form.find('input[name="LicenseState_input"]'));
            HideValidationMessage($form.find("#LicenseNumber"));
        }


        var $warrantyStartDate = $("#WarrantyStartDate").data("kendoDatePicker");

        var $warrantyEndDate = $("#WarrantyEndDate").data("kendoDatePicker");
        if ($warrantyStartDate != undefined && $warrantyStartDate != null && $warrantyEndDate != undefined && $warrantyEndDate != null) {
            var startDate = $warrantyStartDate.value();
            var endDate = $warrantyEndDate.value();
            if (startDate != null && endDate != null && endDate < startDate) {
                ShowValidationMessage($form.find("#WarrantyEndDate"), "To Date must be after the From Date.");
                return false;
            }
            else {
                HideValidationMessage($form.find("#WarrantyEndDate"));
            }
        }
        else {
            HideValidationMessage($form.find("#WarrantyEndDate"));
        }
        var isFirstOwner = $('input:radio[id=rdFirstOwner]:checked').val();

        if (isFirstOwner === undefined) {
            isFirstOwner = null;
        }
        else {
            isFirstOwner = isFirstOwner == "1" ? "true" : "false";
        }

        var isSportUtility = $('input:radio[id=rdSportUtility]:checked').val();

        if (isSportUtility === undefined) {
            isSportUtility = null;
        }
        else {
            isSportUtility = isSportUtility == "1" ? "true" : "false";
        }

        var vehicleIDValue = $("#vehicleID").val();
        var formdata = $form.serializeArray();
        // Add tab name
        formdata.push({ name: "tabName", value: tabName });
        formdata.push({ name: "IsFirstOwner", value: isFirstOwner });
        formdata.push({ name: "IsSportUtilityRV", value: isSportUtility });
        formdata.push({ name: "ID", value: vehicleIDValue });
        formdata.push({ name: "mainTabName", value: "VehicleTab" });
        var isFormValid = true;
        if (!isFormValid) {
            return false;
        }

        $.ajax({
            type: 'POST',
            url: '@Url.Action("Save", "Vehicle", new { area = "Application" })',
            data: formdata,
            traditional: true,
            cache: false,
            async: false,
            success: function (msg) {
                //alert('saved');
                CleanMyContainer(formId);
                retVal = true;
            }
        });

        StyleTabAfterValidation("vehicle", false);
        return retVal;
    }
    var autoCount = '@ViewData["AutoCount"]';
    var rvCount = '@ViewData["RVCount"]';
    var motorcycleCount = '@ViewData["MotorcycleCount"]';
    var trailerCount = '@ViewData["TrailerCount"]';
    $(function () {
        var activeButtons = '@activeButtons';
        var lastUpdatedTab = '@lastUpdatedTab';
        if (activeButtons == 1 && $(".vehicle").length == 1 && $("#Vehicles").length != 1 && $.trim(lastUpdatedTab).length == 0) {
            tabName = $(".vehicle").attr("id");
            tabName = tabName.substr(3);
            LoadVehiclesTypes(tabName, null, 0);
        }

        if ($.trim(lastUpdatedTab).length > 0) {
            LoadVehiclesTypes(lastUpdatedTab, null, 1);
        }

        $("#VIN").live("change", function (e) {
            var allVins = JSON.parse($("#hdnAllVINs").val());

            var vinInput = $(this).val();
            var grid = $("#GrdVehicles").data("kendoGrid");
            // Iterate through the JSON object for a matching VIN on the Value.
            // If a match is found, get the index of the TR ( from Key in the JSON structure) and fire a double click)
            for (var i = 0, l = allVins.length; i < l; i++) {
                if (vinInput != null && allVins[i].Value != null && vinInput.toLowerCase() === allVins[i].Value.toLowerCase()) {
                    console.log('Match found for ' + vinInput);

                    var currentRow = $("#GrdVehicles > .k-grid-content > table").find("tr:eq(" + allVins[i].Key + ")");

                    vehicleId = currentRow.find("td:eq(0)").html();
                    tabName = currentRow.find("td:eq(1)").html();
                    fromCase = currentRow.find("td:eq(2)").html();
                    LoadVehiclesTypes(tabName, vehicleId, fromCase);
                    CleanAllContainers();
                    break;
                }
            }


            e.stopPropagation();
        });
    });
</script>
