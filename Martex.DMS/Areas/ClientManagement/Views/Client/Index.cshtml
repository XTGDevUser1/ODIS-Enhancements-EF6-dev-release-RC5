@{
    ViewBag.Title = "Index";
    Layout = "~/Areas/ClientManagement/Views/Shared/_ClientManagementLayout.cshtml";
}
<hgroup id="main-title" class="thin">
    <h1>Client Maintenance</h1>
</hgroup>
<div class="with-padding">
    <div id="ClientMaintenanceTabs" class="standard-tabs same-height" data="clientTabs">
        <ul class="tabs">
            @if (User.IsInRole(Martex.DMS.Common.RoleConstants.SysAdmin) || User.IsInRole(Martex.DMS.Common.RoleConstants.ClientAdmin))
            {
                if (User.IsInRole(Martex.DMS.Common.RoleConstants.SysAdmin)) //CR # 335: Accessible only to Sys admin
                {
                    <li id="tbClientList"><a id="hypClientSearchCriteria" href="#tabs-1">Clients</a> </li>
                }
            }
        </ul>
        <div id="tabs-1" class="clientTabs">
            <div class="with-padding">
                @Html.Action("Index", "Clients", new { area = "admin" })
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    var clientMaintainenceTabObject = null;
    var clientDetailAvatarWindow;
    $(function () {
        clientMaintainenceTabObject = $('#ClientMaintenanceTabs').tabs();
    });

    function AddClientTab(clientID, tabObjectReference) {

        if (tabObjectReference == null) {
            openAlertMessage('Unable to find Container');
            return false;
        }
        var tabTitle = "In Process";
        if (clientID != null && clientID > 0) {
            tabTitle = "Client-" + clientID;
        }


        if (canAddGenericTabInCurrentContainer(tabTitle, tabObjectReference)) {
            $.ajax({
                type: 'POST',
                url: '/ClientManagement/Client/_ClientDetails',
                traditional: true,
                data: { clientID: clientID },
                cache: false,
                async: true,
                success: function (msg) {
                    addGenericTabWithCurrentContainer(tabTitle, tabObjectReference, msg);
                }
            });
        }
    }

    function CancelClientInformation(clientID, tabObjectReference) {

        if (tabObjectReference == null) {
            openAlertMessage('Unable to find Container');
            return false;
        }

        var clientDirtyContainerName = "frmClientContainerForDirtyFlag_" + clientID;
        if (IsMyContainerDirty(clientDirtyContainerName)) {
            var message = "Changes have not been saved; do you want to continue and lose the changes or cancel and go back to the page?";
            $.modal.confirm(message, function () {
                CleanMyContainer(clientDirtyContainerName);
                //Refresh the page
                deleteGenericTab(clientDirtyContainerName, tabObjectReference);
                AddClaimTab(clientID, tabObjectReference);

            }, function () {
                return false;
            });
        }
        else {
            //Refresh the page
            deleteGenericTab(clientDirtyContainerName, tabObjectReference);
            AddClaimTab(claimID, tabObjectReference);
        }
    }

    function RemoveClientAvatar(suffixClientID) {
        var message = "Are you sure you want to delete this image?";
        $.modal.confirm(message, function () {
            $.ajax({
                type: 'POST',
                url: '/ClientManagement/Client/_RemoveClientAvatar',
                traditional: true,
                data: { clientID: suffixClientID },
                cache: false,
                async: true,
                success: function (msg) {
                    CleanMyContainer("frmClientContainerForDirtyFlag_" + suffixClientID);
                    //Refresh the page
                    $('#ClientDetailsTab_' + suffixClientID).tabs('load', 0);
                    openAlertMessage("Avatar removed successfully.");
                }
            });
        }, function () {
            // Do Nothing
        });
    }

    function ChangeClientAvatar(suffixClientID) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("_Client_Avatar", "Client", new { area = "ClientManagement" })',
            traditional: true,
            data: { entityID: suffixClientID, entity: "Client" },
            cache: false,
            async: false,
            error: function (msg) {
                
            },
            success: function (msg) {
                clientDetailAvatarWindow = $("<div id='clientDetailAvatarWindow' />").appendTo(document.body);
                clientDetailAvatarWindow.kendoWindow({
                    title: "Change Client Avatar",
                    modal: true,
                    width: 1200,
                    height: GetPopupWindowHeight(),
                    deactivate: function () {
                        this.destroy();
                    },
                    close: function (e) {
                        if (document.dialogResult == null || document.dialogResult == "CANCEL") {
                            document.dialogResult = null;
                            if (IsMyContainerDirty('frmAvatar')) {
                                var prompt = PromptForDirtyFlag();
                                if (!prompt) {
                                    e.preventDefault();
                                    return false;
                                }
                                CleanMyContainer('frmAvatar');
                            }
                        }
                        return true;
                    }
                });
                clientDetailAvatarWindow.data('kendoWindow').content(msg).center().open();
            }
        });
    }

    function CancelClientInfoTabInformation(suffixClientID) {

        if (IsMyContainerDirty("frmClientContainerForDirtyFlag_" + suffixClientID)) {
            var message = "Changes have not been saved; do you want to continue and lose the changes or cancel and go back to the page?";
            $.modal.confirm(message, function () {
                // Do Nothing
                // Do Nothing
                CleanMyContainer("frmClientContainerForDirtyFlag_" + suffixClientID);
                //Refresh the page
                $('#ClientDetailsTab_' + suffixClientID).tabs('load', 0);
            }, function () {
                // Do Nothing
            });
        }
    }

    function SaveClientInfoTabInformation(sender, suffixClientID) {

        var errorFoundForClientInfo = false;
        // Validate all the inputs before Saving the values into DB
        // Get all form Reference first so that we can use it for the validation as well as for Serializing the values.
        var form_Client_BasicInformation_Section = "#frmClientDetailsInformationSection_" + suffixClientID;

        var multiselect = $("#ClientOrganizationsValues_" + suffixClientID).data("kendoMultiSelect");
        if (multiselect != undefined && multiselect.value().length == 0) {
            openAlertMessage("Please select at least one organization");
            return false;
        }

        if ($(form_Client_BasicInformation_Section).validationEngine("validate") == false) {
            errorFoundForClientInfo = true;
        }

        var state = $('#ClientClientType_' + suffixClientID).data('kendoComboBox').value();
        var comboName = "ClientClientType_" + suffixClientID + "_input";
        if ($.trim(state).length == 0) {

            ShowValidationMessage($('input[name=' + comboName + ']'), "* This field is required.");
            errorFoundForClientInfo = true;
        }
        else {
            HideValidationMessage($('input[name=' + comboName + ']'));
        }
        //if (!ValidateCombo(Combo_Client_Info_Status)) {
        //    errorFoundForClientInfo = true;
        //    return false;
        //}


        if (!errorFoundForClientInfo) {

            var basicInformationDataForClientInfo = $(form_Client_BasicInformation_Section).serializeArray();

            var completeData = basicInformationDataForClientInfo;

            // Set values for Kendo Combo Box
            var clientAccountingSystemDivisionCode = $("#ClientAccountingSystemDivisionCode_" + suffixClientID).data('kendoNumericTextBox').value();
            var clientPaymentBalance = $("#ClientPaymentBalance_" + suffixClientID).data('kendoNumericTextBox').value();
            var clientOrganizationsValues = $("#ClientOrganizationsValues_" + suffixClientID).data('kendoMultiSelect').dataItems();

            var clientType = $("#ClientClientType_" + suffixClientID).data('kendoComboBox').value();
            var clientRep = $("#ClientClientRep_" + suffixClientID).data('kendoComboBox').value();

            completeData.push({ name: "Client.AccountingSystemDivisionCode", value: clientAccountingSystemDivisionCode });
            completeData.push({ name: "Client.PaymentBalance", value: clientPaymentBalance });

            //completeData.push({ name: "ClientOrganizationsValues", value: clientOrganizationsValues });
            completeData.push({ name: "Client.ClientTypeID", value: clientType });
            completeData.push({ name: "Client.ClientRepID", value: clientRep });
            completeData.push({ name: "Client.MainContactPhone", value: GetPhoneNumberForDB("MainContactPhone_" + suffixClientID) });

            completeData.push({ name: "Client.IsActive", value: $("#clientIsActive_" + suffixClientID).is(":checked") });
            var clientOrganizations = [];
            for (var i = 0, l = clientOrganizationsValues.length; i < l; i++) {
                clientOrganizations.push(clientOrganizationsValues[i].Value);
            }

            for (var i = 0, l = completeData.length; i < l; i++) {
                if (completeData[i].name == "ClientOrganizationsValues_" + suffixClientID) {
                    completeData[i].name = "ClientOrganizationsValues";
                    completeData[i].Value = parseInt(completeData[i].value);
                }


            }
            $.ajax({
                type: 'POST',
                url: '/ClientManagement/Client/SaveClientInformationSection',
                data: completeData,
                success: function (msg) {
                    // Once the values save to DB Set page to No Dirty and Hide the Buttons
                    CleanMyContainer('frmClientContainerForDirtyFlag_' + suffixClientID);
                    openAlertMessage('Client details successfully updated!');
                    //Refresh the page
                    $('#ClientDetailsTab_' + suffixClientID).tabs('load', 0);
                }
            });


        }

        return false;
    }




    function DeleteClientTab(suffixClientID) {
        var activeIndex = clientMaintainenceTabObject.tabs('option', 'selected');
        if (IsMyContainerDirty("frmClientContainerForDirtyFlag_" + suffixClientID)) {
            var message = "Changes have not been saved; do you want to continue and lose the changes or cancel and go back to the page?";
            $.modal.confirm(message, function () {
                CleanMyContainer("frmClientContainerForDirtyFlag_" + suffixClientID);
                clientMaintainenceTabObject.tabs('remove', activeIndex);
                clientMaintainenceTabObject.tabs('refresh');
                clientMaintainenceTabObject.tabs('select', 0);

            }, function () {
                return false;
            });
        }
        else {
            clientMaintainenceTabObject.tabs('remove', activeIndex);
            clientMaintainenceTabObject.tabs('refresh');
            clientMaintainenceTabObject.tabs('select', 0);
        }
    }
</script>
