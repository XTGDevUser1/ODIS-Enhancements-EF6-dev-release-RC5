@model Martex.DMS.DAL.Entities.HistorySearchCriteria
@using Kendo.Mvc.UI
@using Martex.DMS.ActionFilters;
@{
    ViewBag.Title = "Index";
    Layout = "";   
}

<script type="text/javascript">
    function NameSectionType_Change(e) {
        var combo = e.sender;
        if (!IsUserInputValidForChangeOnKendoCombo(combo)) {
            e.preventDefault();
        }
        var value = combo.value();
        LoadNameSectionTypes(value);

    }
    function DateSectionPresetOnChange(e) {
        var combo = e.sender;
        if (!IsUserInputValidForChangeOnKendoCombo(combo)) {
            e.preventDefault();
        }
        var value = combo.value();
        DatePresetOnChange(value);
    }
    function DatePresetOnChange(value) {
        var startPicker = $("#DateSectionFromDate").data("kendoDatePicker");
        var endPicker = $("#DateSectionToDate").data("kendoDatePicker");
        var endDate = new Date();
        var startDate = new Date();
        if (value == 1) {
            endPicker.value(endDate);
            startDate.setDate(startDate.getDate() - 7);
            startPicker.value(startDate)
        }
        else if (value == 2) {
            endPicker.value(endDate);
            startDate.setDate(startDate.getDate() - 30);
            startPicker.value(startDate)
        }
        else if (value == 3) {
            endPicker.value(endDate);
            startDate.setDate(startDate.getDate() - 90);
            startPicker.value(startDate)
        }
        else {
            endPicker.value('');
            startPicker.value('')
        }
        LoadSearchCriteria();
    }
    function VehicleMakeOnChange(e) {

        var combo = e.sender;
        if (!IsUserInputValidForChangeOnKendoCombo(combo)) {
            e.preventDefault();
        }
        var value = combo.value();
        vehicleMakeChange(value);
    }
    function vehicleMakeChange(value) {
        if (value == "Remove") {
            $('#VehicleMake').data('kendoComboBox').value('');
        }
        $('#divOtherVehicleModel').hide();
        $('#VehicleMakeOther').val('');
        $('#VehicleModelOther').val('');
        $('#VehicleModel').data('kendoComboBox').value('');
        if (value == "Other") {
            $('#divOtherVehicleMake').show();
        }
        else {
            $('#divOtherVehicleMake').hide();
        }
        LoadSearchCriteria();
    }
    function VehicleModelOnChange(e) {
        $('#VehicleModelOther').val('');
        var combo = e.sender;
        if (!IsUserInputValidForChangeOnKendoCombo(combo)) {
            e.preventDefault();
        }
        var value = combo.value();
        vehicleModelChange(value);
    }
    function vehicleModelChange(value) {
        if (value == "Other") {
            $('#divOtherVehicleModel').show();
        }
        else {
            $('#divOtherVehicleModel').hide();
        }
        LoadSearchCriteria();
    }
    function LoadNameSectionTypes(value) {

        if (value == '' || value == "select") {
            $('#NameSectionTypeISP').val('');
            $('#NameSectionTypeUser').data('kendoComboBox').value('');
            $('#NameSectionTypeMemberFirstName').val('');
            $('#NameSectionTypeMemberLastName').val('');

            $('#divNameSectionValueISP').hide();
            $('#divNameSectionValueUser').hide();
            $('#divNameSectionValueMember').hide();
        }
        else if (value == 1) {
            $('#NameSectionTypeUser').data('kendoComboBox').value('');
            $('#NameSectionTypeMemberFirstName').val('');
            $('#NameSectionTypeMemberLastName').val('');

            $('#divNameSectionValueISP').show();
            $('#divNameSectionValueUser').hide();
            $('#divNameSectionValueMember').hide();
        }
        else if (value == 3) {
            $('#NameSectionTypeISP').val('');
            $('#NameSectionTypeMemberFirstName').val('');
            $('#NameSectionTypeMemberLastName').val('');

            $('#divNameSectionValueISP').hide();
            $('#divNameSectionValueUser').show();
            $('#divNameSectionValueMember').hide();
        }
        else if (value == 2) {
            $('#NameSectionTypeISP').val('');
            $('#NameSectionTypeUser').data('kendoComboBox').value('');

            $('#divNameSectionValueISP').hide();
            $('#divNameSectionValueUser').hide();
            $('#divNameSectionValueMember').show();
        }
        LoadSearchCriteria();
    }

    function filterYears() {
        var VehicleTypeValue = $("#VehicleType").data('kendoComboBox').value();
        if (VehicleTypeValue == null) {
            VehicleTypeValue = 0;
        }
        return {
            vehicleType: VehicleTypeValue
        };
    }

    function filterMake() {
        return {
            vehicleType: $("#VehicleType").data('kendoComboBox').value(),
            vehicleYear: $("#VehicleYear").data('kendoComboBox').value()
        };
    }

    function filterModel() {
        return {
            vehicleType: $("#VehicleType").data('kendoComboBox').value(),
            make: $("#VehicleMake").data('kendoComboBox').value()
        };
    }
    // When in a panel we have single item it's required to remove orange bar when it's collapsed
    function fnPanelCollapse(e) {
        $(e.item).find("> .k-link").removeClass("k-state-selected");
        $(e.item).find("> .k-link").removeClass("k-state-focused");
    }

    function StartDateChange() {
        var endPicker = $("#DateSectionToDate").data("kendoDatePicker"),
            startDate = this.value();

        if (startDate) {
            startDate = new Date(startDate);
            startDate.setDate(startDate.getDate() + 1);
            endPicker.min(startDate);
        }
    }

    function EndDateChange() {
        var startPicker = $("#DateSectionFromDate").data("kendoDatePicker"),
            endDate = this.value();

        if (endDate) {
            endDate = new Date(endDate);
            endDate.setDate(endDate.getDate() - 1);
            startPicker.max(endDate);
        }
    }

    function ClientID_Change() {
        $("#ProgramID").data("kendoMultiSelect").dataSource.read();
        $('#ProgramID').data("kendoMultiSelect").value([]);
        LoadSearchCriteria();
    }

    function fnClientList() {
        var value = $("#ClientID").data("kendoMultiSelect").value();
        return {
            id: value.toString()
        };
    }

    function ProgramID_Change() {
        LoadSearchCriteria();
    }
</script>
<form id="frmHistorySearchCriteria">
@Html.HiddenFor(u => u.GroupedPanelID, new { id = "GroupedPanelID" })
@Html.HiddenFor(u => u.GroupedPanelName, new { id = "GroupedPanelName" })
@Html.HiddenFor(u => u.GroupedPanelDateRange, new { id = "GroupedPanelDateRange" })
@Html.HiddenFor(u => u.GroupedPanelClient, new { id = "GroupedPanelClient" })
@Html.HiddenFor(u => u.GroupedPanelServiceRequestStatus, new { id = "GroupedPanelServiceRequestStatus" })
@Html.HiddenFor(u => u.GroupedPanelServiceType, new { id = "GroupedPanelServiceType" })
@Html.HiddenFor(u => u.GroupedPanelSpecial, new { id = "GroupedPanelSpecial" })
@Html.HiddenFor(u => u.GroupedPanelVehicle, new { id = "GroupedPanelVehicle" })
@Html.HiddenFor(u => u.GroupedPanelPaymentType, new { id = "GroupedPanelPaymentType" })
@Html.HiddenFor(u => u.GroupedPanelPurchaseOrderStatus, new { id = "GroupedPanelPurchaseOrderStatus" })
<div class="columns">
    <div class="twelve-columns">
        <div class="float-right">
            <a href="javascript:void(0)" class="button gray-gradient  btnReset">Reset</a>
            <a href="javascript:void(0)" class="button green-gradient   btnSearch">Search</a>
        </div>
    </div>
    <!--ID Section Start-->
    <div class="four-columns">
        @(Html.Kendo().PanelBar()
        .Name("panelID")
        .ExpandMode(PanelBarExpandMode.Multiple)
        .Events(events => events.Collapse("fnPanelCollapse"))
        .Items(panelbar =>
        {
            panelbar.Add().Text("ID")
                .Expanded(true)
                .Selected(true)
                .Content(@<div class="with-padding">
                    <div class="button-height inline-label small-margin-bottom">
                        <label for="Type" class="label">
                            Type</label>
                        @(Html.Kendo().ComboBox()
                        .BindTo(ViewData[StaticData.HistorySearchCriteriaIDSectionType.ToString()] as IEnumerable<SelectListItem>)
                        .Name("IDSectionType")
                        .SelectedIndex(0)
                        .HighlightFirst(true)
                        .Filter(FilterType.StartsWith).MinLength(0)
                        .Events(events => events.Change("ValidateInputForKendoCombo"))
                                .Value(Model.IDSectionType == null ? string.Empty : Model.IDSectionType.Value.ToString())
                                .Suggest(true)
                        )
                    </div>
                    <p class="inline-label">
                        <label for="ID" class="label">
                            ID</label>
                        @Html.TextBoxFor(u => u.IDSectionID, new { @class = "input full-width" })
                    </p>
                </div>
                );
        })
    )
    </div>
    <!--ID Section End-->
    <!--Name Section Start-->
    <div class="four-columns">
        @(Html.Kendo().PanelBar()
        .Name("panelName")
        .ExpandMode(PanelBarExpandMode.Multiple)
        .Events(events => events.Collapse("fnPanelCollapse"))
        .Items(panelbar =>
        {
            panelbar.Add().Text("Name")
                .Expanded(true)
                .Selected(true)
                .Content(@<div class="with-padding">
                    <div class="button-height inline-label small-margin-bottom">
                        <label for="Type" class="label">
                            Type</label>
                        @(Html.Kendo().ComboBox()
                        .BindTo(ViewData[Martex.DMS.ActionFilters.StaticData.HistorySearchCriteriaNameSectionType.ToString()] as IEnumerable<SelectListItem>)
                        .Name("NameSectionType")
                        .SelectedIndex(0)
                        .HighlightFirst(true)
                        .Filter(FilterType.StartsWith).MinLength(0)
                        .Events(events => events.Change("NameSectionType_Change"))
                                .Value(Model.NameSectionType == null ? string.Empty : Model.NameSectionType.Value.ToString())
                                .Suggest(true)
                        )
                    </div>
                    <div id="divNameSectionValueISP" style="display: none;">
                        <p class="inline-label">
                            <label for="NameSectionTypeISP" class="label">
                                Name</label>
                            @Html.TextBoxFor(u => u.NameSectionTypeISP, new { @class = "input full-width" })
                        </p>
                    </div>
                    <div class="button-height inline-label small-margin-bottom" style="display: none;"
                        id="divNameSectionValueUser">
                        <label for="NameSectionTypeValue" class="label">
                            Name
                        </label>
                        @(Html.Kendo().ComboBox()
                        .BindTo(ViewData[Martex.DMS.ActionFilters.StaticData.HistorySearchCriteriaNameSectionUser.ToString()] as IEnumerable<SelectListItem>)
                        .Name("NameSectionTypeUser")
                        .SelectedIndex(0)
                        .HighlightFirst(true)
                        .Filter(FilterType.StartsWith).MinLength(0)
                        .Events(events => events.Change("ValidateInputForKendoCombo"))
                                .Value(Model.NameSectionTypeUser == null ? string.Empty : Model.NameSectionTypeUser.ToString())
                                .Suggest(true)
                        )
                    </div>
                    <div id="divNameSectionValueMember" style="display: none;">
                        <p class="inline-label">
                            <label for="NameSectionTypeMemberFirstName" class="label">
                                First Name</label>
                            @Html.TextBoxFor(u => u.NameSectionTypeMemberFirstName, new { @class = "input full-width" })
                        </p>
                        <p class="inline-label">
                            <label for="NameSectionTypeMemberLastName" class="label">
                                Last Name</label>
                            @Html.TextBoxFor(u => u.NameSectionTypeMemberLastName, new { @class = "input full-width" })
                        </p>
                    </div>
                    <div class="button-height inline-label small-margin-bottom">
                        <label for="NameSectionTypeValue" class="label">
                            Filter Type
                        </label>
                        @(Html.Kendo().ComboBox()
                        .BindTo(ViewData[Martex.DMS.ActionFilters.StaticData.HistorySearchCriteriaNameFilterType.ToString()] as IEnumerable<SelectListItem>)
                        .Name("NameSectionFilter")
                        .SelectedIndex(0)
                        .HighlightFirst(true)
                        .Filter(FilterType.StartsWith).MinLength(0)
                        .Events(events => events.Change("ValidateInputForKendoCombo"))
                                .Value(Model.NameSectionFilter == null ? string.Empty : Model.NameSectionFilter.Value.ToString())
                                .Suggest(true)
                        )
                    </div>
                </div>
                );
        })
    )
    </div>
    <!--Name Section End-->
    <!--Date Range Section Start-->
    <div class="four-columns">
        @(Html.Kendo().PanelBar()
        .Name("panelDateRange")
        .ExpandMode(PanelBarExpandMode.Multiple)
        .Events(events => events.Collapse("fnPanelCollapse"))
        .Items(panelbar =>
        {
            panelbar.Add().Text("Date Range")
                .Expanded(true)
                .Selected(true)
                .Content(@<div class="with-padding">
                <div class="columns">
                <div class="twelve-columns">
                    <div class="button-height ">
                        <div class="float-left inline-small-label">
                            <label for="NameSectionTypeMemberLastName" class="label">
                                From</label>
                            @(Html.Kendo().DatePicker()
                            .Name("DateSectionFromDate")
                            .Events(e => e.Change("StartDateChange"))
                            .HtmlAttributes(new { style = "width:100px", type="text" })
                            )
                        </div>
                        <div class="float-left large-margin-left inline-small-label">
                            <label for="DateSectionToDate" class="label">
                                To</label>
                            @(Html.Kendo().DatePicker()
                            .Name("DateSectionToDate")
                            .Events(e => e.Change("EndDateChange"))
                            .HtmlAttributes(new { style = "width:100px", type = "text" })
                            )
                        </div>
                    </div>
                 </div>
                 <div class="new-row twelve-columns">  
                    <div class="button-height  inline-small-label small-margin-bottom">
                        <label for="DateSectionPreset" class="label">
                            Preset
                        </label>
                        @(Html.Kendo().ComboBox()
                        .BindTo(ViewData[Martex.DMS.ActionFilters.StaticData.HistorySearchCriteriaDatePreset.ToString()] as IEnumerable<SelectListItem>)
                        .Name("DateSectionPreset")
                        .SelectedIndex(0)
                        .HighlightFirst(true)
                        .Filter(FilterType.StartsWith).MinLength(0)
                        .Events(events => events.Change("DateSectionPresetOnChange"))
                                .Value(Model.DateSectionPreset == null ? string.Empty : Model.DateSectionPreset.Value.ToString())
                                .Suggest(true)
                        )
                    </div>
                    </div>
                </div>
                </div>
                );
        })
    )
    </div>
    <!--Date Range Section End-->
    <!--Client Section Start-->
    <div class="new-row four-columns">
        @(Html.Kendo().PanelBar()
        .Name("panelClient")
        .ExpandMode(PanelBarExpandMode.Multiple)
        .Events(events => events.Collapse("fnPanelCollapse"))

        .Items(panelbar =>
        {
            panelbar.Add().Text("Client")
                .Expanded(false)
                .Selected(false)
                .Content(@<div class="with-padding">
                    <div class="button-height inline-label small-margin-bottom">
                        <label for="ClientID" class="label">
                            Client
                        </label>
                        @(Html.Kendo().MultiSelect()
                        .Name("ClientID")
                        .Placeholder("Select Client")
                        .BindTo(ViewData[StaticData.Clients.ToString()] as IEnumerable<SelectListItem>)
                        .DataTextField("Text")
                        .DataValueField("Value")
                        .Events(e =>
                        {
                            e.Change("ClientID_Change");
                        })
                        .Value(Model.ClientIDValuesForCombo)
                        )
                    </div>
                    <div class="button-height inline-label small-margin-bottom">
                        <label for="ProgramID" class="label">
                            Program
                        </label>
                        @(Html.Kendo().MultiSelect()
                        .Name("ProgramID")
                        .DataTextField("Text")
                        .DataValueField("Value")
                        .Placeholder("Select programs")
                        .Events(e =>
                        {
                            e.Change("ProgramID_Change");
                        })
                        .DataSource(source =>
                        {
                            source.Read(read =>
                            {
                                read.Action("GetPrograms", "History").Data("fnClientList");
                            })
                            .ServerFiltering(true);
                        })
                        .Value(Model.ProgramIDValuesForCombo)
                        )
                    </div>
                </div>
                );
        })
    )
    </div>
    <!--Client Section End-->
    <!--Service Request Status Section Start-->
    <div class="four-columns">
        @(Html.Kendo().PanelBar()
        .Name("panelServiceRequestStatus")
        .ExpandMode(PanelBarExpandMode.Multiple)
        .Events(events => events.Collapse("fnPanelCollapse"))
        .Items(panelbar =>
        {
            panelbar.Add().Text("Service Request Status")
                .Expanded(false)
                .Selected(false)
                .Content(@<div class="with-padding">
                    @if (Model.ServiceRequestStatus != null && Model.ServiceRequestStatus.Count > 0)
                    {
                        for (int i = 0; i < Model.ServiceRequestStatus.Count; i++)
                        {
                        <div class="with-small-padding">
                            <div>
                                @Html.Hidden("ServiceRequestStatus[" + i.ToString() + "].Name", @Model.ServiceRequestStatus[i].Name)
                                @Html.Hidden("ServiceRequestStatus[" + i.ToString() + "].ID", @Model.ServiceRequestStatus[i].ID)
                                @Html.CheckBox("ServiceRequestStatus[" + i.ToString() + "].Selected", @Model.ServiceRequestStatus[i].Selected, new { @class = "checkbox" })
                                @Model.ServiceRequestStatus[i].Name
                            </div>
                        </div>
                        }
                    }
                </div>
                );
        })
    )
    </div>
    <!--Service Request Status Section End-->
    <!--Service Type Section Start-->
    <div class="four-columns">
        @(Html.Kendo().PanelBar()
        .Name("panelServiceType")
        .ExpandMode(PanelBarExpandMode.Multiple)
        .Events(events => events.Collapse("fnPanelCollapse"))
        .Items(panelbar =>
        {
            panelbar.Add().Text("Service Type")
                .Expanded(false)
                .Selected(false)
                .Content(@<div class="with-padding">
                    @if (Model.ServiceType != null && Model.ServiceType.Count > 0)
                    {
                        for (int i = 0; i < Model.ServiceType.Count; i++)
                        {
                        <div class="with-small-padding">
                            <div>
                                @Html.Hidden("ServiceType[" + i.ToString() + "].Name", @Model.ServiceType[i].Name)
                                @Html.Hidden("ServiceType[" + i.ToString() + "].ID", @Model.ServiceType[i].ID)
                                @Html.CheckBox("ServiceType[" + i.ToString() + "].Selected", @Model.ServiceType[i].Selected, new { @class = "checkbox" })
                                @Model.ServiceType[i].Name
                            </div>
                        </div>
                        }
                    }
                </div>
                );
        })
    )
    </div>
    <!--Service Type Section End-->
    <!--Special Section Start-->
    <div class="new-row four-columns">
        @(Html.Kendo().PanelBar()
        .Name("panelSpecial")
        .ExpandMode(PanelBarExpandMode.Multiple)
        .Events(events => events.Collapse("fnPanelCollapse"))
        .Items(panelbar =>
        {
            panelbar.Add().Text("Special")
                .Expanded(false)
                .Selected(false)
                .Content(@<div class="with-padding">
                    @if (Model.SpecialList != null && Model.SpecialList.Count > 0)
                    {
                        for (int i = 0; i < Model.SpecialList.Count; i++)
                        {
                        <div class="with-small-padding">
                            <div>
                                @Html.Hidden("SpecialList[" + i.ToString() + "].Name", @Model.SpecialList[i].Name)
                                @Html.Hidden("SpecialList[" + i.ToString() + "].ID", @Model.SpecialList[i].ID)
                                @Html.CheckBox("SpecialList[" + i.ToString() + "].Selected", @Model.SpecialList[i].Selected, new { @class = "checkbox" })
                                @Model.SpecialList[i].Name
                            </div>
                        </div>
                        }
                    }
                </div>
                );
        })
    )
    </div>
    <!--Special Section End-->
    <!--Vehicle Section Start-->
    <div class="four-columns">
        @(Html.Kendo().PanelBar()
        .Name("panelVehicle")
        .ExpandMode(PanelBarExpandMode.Multiple)
        .Events(events => events.Collapse("fnPanelCollapse"))
        .Items(panelbar =>
        {
            panelbar.Add().Text("Vehicle")
                .Expanded(false)
                .Selected(false)
                .Content(@<div class="with-padding">
                    <div class="button-height inline-label small-margin-bottom">
                        <label for="VehicleTypeName" class="label">
                            Vehicle Type
                        </label>
                        @(Html.Kendo().ComboBox()
                        .BindTo(ViewData[StaticData.HistorySearchCriteriaVehicleType.ToString()] as IEnumerable<SelectListItem>)
                        .Name("VehicleType")
                        .SelectedIndex(0)
                        .HighlightFirst(true)
                        .Filter(FilterType.StartsWith).MinLength(0)
                        .Events(events => events.Change("ValidateInputForKendoCombo"))
                                .Value(Model.VehicleType == null ? string.Empty : Model.VehicleType.Value.ToString())
                                .Suggest(true)
                        )
                    </div>
                    <div class="button-height inline-label small-margin-bottom">
                        <label for="VehicleTypeName" class="label">
                            Year
                        </label>
                        @(Html.Kendo().ComboBox()
                        .Name("VehicleYear")
                        .HighlightFirst(true)
                        .Filter(FilterType.StartsWith).MinLength(0)
                        .Events(events => events.Change("ValidateInputForKendoCombo"))
                        .Placeholder("Select Year")
                        .DataTextField("Text")
                        .DataValueField("Value")
                        .DataSource(source =>
                        {
                            source.Read(read =>
                            {
                                read.Action("GetYears", "History")
                                    .Data("filterYears");
                            })
                            .ServerFiltering(true);
                        })
                        //.Enable(false)
                        //.AutoBind(false)
                        //.CascadeFrom("VehicleType")
                        .Value(Model.VehicleYear)
                                .Suggest(true)
                        )
                    </div>
                    <div class="button-height inline-label small-margin-bottom">
                        <label for="VehicleMake" class="label">
                            Make
                        </label>
                        @(Html.Kendo().ComboBoxFor(u => u.VehicleMake)
                        .HighlightFirst(true)
                        .Filter(FilterType.StartsWith).MinLength(0)
                        .Events(events => events.Change("VehicleMakeOnChange"))
                        .Placeholder("Select Make")
                        .DataTextField("Text")
                        .DataValueField("Value")
                        .DataSource(source =>
                        {
                            source.Read(read =>
                            {
                                read.Action("GetMake", "History")
                                    .Data("filterMake");
                            })
                            .ServerFiltering(true);
                        })
                        .Enable(false)
                        .AutoBind(false)
                                .CascadeFrom("VehicleType").Suggest(true)
                        )
                    </div>
                    <div id="divOtherVehicleMake" style="display: none;">
                        <p class="inline-label">
                            <label for="OtherVehicleMake" class="label">
                                If Other Make
                            </label>
                            @Html.TextBoxFor(u => u.VehicleMakeOther, new { @class = "input full-width" })
                        </p>
                    </div>
                    <div class="button-height inline-label small-margin-bottom">
                        <label for="VehicleMake" class="label">
                            Model
                        </label>
                        @(Html.Kendo().ComboBox()
                        .Name("VehicleModel")
                        .HighlightFirst(true)
                        .Filter(FilterType.StartsWith).MinLength(0)
                        .Events(events => events.Change("VehicleModelOnChange"))
                        .Placeholder("Select Model")
                        .DataTextField("Text")
                        .DataValueField("Value")
                        .DataSource(source =>
                        {
                            source.Read(read =>
                            {
                                read.Action("GetModelForVehicle", "History")
                                    .Data("filterModel");
                            })
                            .ServerFiltering(true);
                        })
                        .Enable(false)
                        .AutoBind(false)
                        .CascadeFrom("VehicleMake")
                                .Value(Model.VehicleModel).Suggest(true)
                        )
                    </div>
                    <div id="divOtherVehicleModel" style="display: none;">
                        <p class="inline-label">
                            <label for="OtherVehicleModel" class="label">
                                If Other Model
                            </label>
                            @Html.TextBoxFor(u => u.VehicleModelOther, new { @class = "input full-width" })
                        </p>
                    </div>
                </div>
                );
        })
    )
    </div>
    <!--Vehicle Section End-->
    <!--Payment Type Section Start-->
    <div class="four-columns">
        @(Html.Kendo().PanelBar()
        .Name("panelPaymentType")
        .ExpandMode(PanelBarExpandMode.Multiple)
        .Events(events => events.Collapse("fnPanelCollapse"))
        .Items(panelbar =>
        {
            panelbar.Add().Text("Payment Type")
                .Expanded(false)
                .Selected(false)
                .Content(@<div class="with-padding">
                    @if (Model.PaymentType != null && Model.PaymentType.Count > 0)
                    {
                        for (int i = 0; i < Model.PaymentType.Count; i++)
                        {
                        <div class="with-small-padding">
                            <div>
                                @Html.Hidden("PaymentType[" + i.ToString() + "].Name", @Model.PaymentType[i].Name)
                                @Html.Hidden("PaymentType[" + i.ToString() + "].ID", @Model.PaymentType[i].ID)
                                @Html.CheckBox("PaymentType[" + i.ToString() + "].Selected", @Model.PaymentType[i].Selected, new { @class = "checkbox" })
                                @Model.PaymentType[i].Name
                            </div>
                        </div>
                        }
                    }
                </div>
                );
        })
    )
    </div>
    <!--Payment Type Section End-->
    <!--Purchase Order Status Section Start-->
    <div class="new-row four-columns">
        @(Html.Kendo().PanelBar()
        .Name("panelPurchaseOrderStatus")
        .ExpandMode(PanelBarExpandMode.Multiple)
        .Events(events => events.Collapse("fnPanelCollapse"))
        .Items(panelbar =>
        {
            panelbar.Add().Text("Purchase Order Status")
                .Expanded(false)
                .Selected(false)
                .Content(@<div class="with-padding">
                    @if (Model.PurchaseOrderStatus != null && Model.PurchaseOrderStatus.Count > 0)
                    {
                        for (int i = 0; i < Model.PurchaseOrderStatus.Count; i++)
                        {
                        <div class="with-small-padding">
                            <div>
                                @Html.Hidden("PurchaseOrderStatus[" + i.ToString() + "].Name", @Model.PurchaseOrderStatus[i].Name)
                                @Html.Hidden("PurchaseOrderStatus[" + i.ToString() + "].ID", @Model.PurchaseOrderStatus[i].ID)
                                @Html.CheckBox("PurchaseOrderStatus[" + i.ToString() + "].Selected", @Model.PurchaseOrderStatus[i].Selected, new { @class = "checkbox" })
                                @Model.PurchaseOrderStatus[i].Name
                            </div>
                        </div>
                        }
                    }
                </div>
                );
        })
    )
    </div>
    <!--Purchase Order Status Section End-->
    <div class="twelve-columns">
        <div class="float-right">
            <a href="javascript:void(0)" class="button gray-gradient  btnReset">Reset</a>
            <a href="javascript:void(0)" class="button green-gradient  btnSearch">Search</a>
        </div>
    </div>
</div>
</form>
<script type="text/javascript">
    $(document).ready(function () {
        setTimeout(function () {
            var vehcicelModel = "@Model.VehicleModel";
            if (vehcicelModel != '' && vehcicelModel != undefined && vehcicelModel != null) {
                $('#VehicleModel').data('kendoComboBox').text(vehcicelModel);
            }
            var make = $('#VehicleMake').data('kendoComboBox').value();
            if (make == "Other") {
                $('#divOtherVehicleMake').show();
            }
            var model = $('#VehicleModel').data('kendoComboBox').value();
            if (model == "Other") {
                $('#divOtherVehicleModel').show();
            }
            $("#IDSectionID").attr('maxlength', '255');
            $("#NameSectionTypeISP").attr('maxlength', '255');
            $("#NameSectionTypeMemberFirstName").attr('maxlength', '255');
            $("#NameSectionTypeMemberLastName").attr('maxlength', '255');
            LoadSearchCriteria();
        }, 1000);


    });
    function GetData() {
        var postData = $('#frmHistorySearchCriteria').serializeArray();
        postData.push({ name: "IDSectionTypeValue", value: $('#IDSectionType').data('kendoComboBox').text() });
        postData.push({ name: "DateSectionPresetValue", value: $('#DateSectionPreset').data('kendoComboBox').text() });
        postData.push({ name: "NameSectionTypeValue", value: $('#NameSectionType').data('kendoComboBox').text() });
        postData.push({ name: "NameSectionFilterValue", value: $('#NameSectionFilter').data('kendoComboBox').text() });
        postData.push({ name: "VehicleTypeValue", value: $('#VehicleType').data('kendoComboBox').text() });
        return postData;
    }
    $(function () {

        $("#IDSectionType").data("kendoComboBox").list.width(140);
        $("#NameSectionType").data("kendoComboBox").list.width(140);
        $("#NameSectionTypeUser").data("kendoComboBox").list.width(140);
        $("#NameSectionFilter").data("kendoComboBox").list.width(140);
        $("#DateSectionPreset").data("kendoComboBox").list.width(140);
        $("#VehicleType").data("kendoComboBox").list.width(140);
        $("#VehicleMake").data("kendoComboBox").list.width(250);
        $("#VehicleModel").data("kendoComboBox").list.width(250);

        var nameSectionID = $("#NameSectionType").data("kendoComboBox").value();
        if (nameSectionID != null && nameSectionID > 0) {
            LoadNameSectionTypes(nameSectionID);
        }

        $('#frmHistorySearchCriteria input[type="text"]').change(function () {

            var startDatePicker = $("#DateSectionFromDate").data("kendoDatePicker").value();
            var endDatePicker = $("#DateSectionToDate").data("kendoDatePicker").value();

            if (startDatePicker == null) {
                $("#DateSectionFromDate").data("kendoDatePicker").value('');
            }
            if (endDatePicker == null) {
                $("#DateSectionToDate").data("kendoDatePicker").value('');
            }

            LoadSearchCriteria();

        });
        $('#frmHistorySearchCriteria input[type="checkbox"]').change(function () {
            LoadSearchCriteria();
        });

        $('#frmHistorySearchCriteria').validationEngine();

        $('.btnReset').click(function () {

            $('#btnSearchCriteriaClearAll').click();
            $('#frmHistorySearchCriteria').validationEngine("hideAll");
        });

        

        $('.btnSearch').click(function () {
            PerformSearch($(this))
            return false;
        });


    });

    function LoadListTab(markup) {
        var nameToCheck = "List";
        var tabNameExists = false;

        $('#SearchHistoryCriteriaTab ul li a').each(function (i) {
            if (this.text == nameToCheck) {
                tabNameExists = true;
            }
        });

        if (!tabNameExists) {
           
            var tabTemplate = "<li><a href='#{href}'>#{label}</a></li>";
            var tabCounter = 2;
            var label = "List",
            id = "tabs-" + tabCounter,
            li = $(tabTemplate.replace(/#\{href\}/g, "#" + id).replace(/#\{label\}/g, label)),
            tabContentHtml = markup || "No data to display";

            tabObject.find(".ui-tabs-nav").append(li);
            tabObject.append("<div id='" + id + "' class='historyDynamicTabs ui-tabs-panel ui-widget-content ui-corner-bottom ui-tabs-hide'>" + tabContentHtml + "</div>");
            tabObject.tabs("refresh");
            tabObject.tabs('option', 'active', false);
        }
        else {
            $("#tabs-2").html(markup);
        }

        tabObject.tabs('select', 1);
    }

    function LoadSearchCriteria() {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetSelectedSearchCriteria", "History", new { area = "Application" })',
            data: GetData(),
            traditional: true,
            cache: false,
            async: false,
            global: false,
            success: function (msg) {
                $('#ulHistorySearchCriteria').html(msg);
            }
        });
    }
    function LoadSearchCriteriaRight(data) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetSearchCriteriaRight", "History", new { area = "Application" })',
            data: data,
            traditional: true,
            cache: false,
            async: false,
            global: false,
            success: function (msg) {
                $('#ulHistorySearchCriteriaRight').html(msg);
            }
        });
    }

</script>
