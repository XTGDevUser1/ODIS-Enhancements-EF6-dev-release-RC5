@model Martex.DMS.DAL.Entities.MemberModel
@using Kendo.Mvc.UI;
@using Martex.DMS.Areas.Application.Models;
<style type="text/css">
    .ui-datepicker {
        z-index: 99999 !important;
    }
</style>
<script language="javascript" type="text/javascript">
    var fieldsForValidation = null;

    function UpdateRequiredFieldIndicator(items) {
        for (var i = 0, l = items.length; i < l; i++) {
            if (items[i].Value.toLowerCase() == "yes") {
                $("#" + items[i].Name).show();
                if (items[i].Name == "ShowEffectiveExpirationDates") {
                    $('#divEffectiveDate').show();
                    $('#divExpirationDate').show();
                }
            }
            else {
                $("#" + items[i].Name).hide();
                if (items[i].Name == "ShowEffectiveExpirationDates") {
                    $('#divEffectiveDate').hide();
                    $('#divExpirationDate').hide();
                }
            }
        }

        //Update Effective and Expiration Date
        var effectiveDate = $("#EffectiveDate").data("kendoDatePicker");
        effectiveDate.value(new Date());
        effectiveDate.trigger("change");
    }

    function GetFieldsForValidation(programID) {
        $.ajax({
            type: 'POST',
            url: '@Url.Action("GetFieldsForValidation", "Member", new { area = "Application" })',
            data: { programID: programID },
            traditional: true,
            cache: false,
            async: true,
            success: function (msg) {
                fieldsForValidation = msg.Data;
                UpdateRequiredFieldIndicator(fieldsForValidation);
            }

        });
    }
    function onComboBoxChange_ClientReference(e) {

        var combo = $('#ProgramID').data("kendoComboBox");
        var comboValue = combo.value();
        // PV: Validate user input on Telerik dropdowns
        if (!IsUserInputValidForChangeOnKendoCombo(combo)) {
            e.preventDefault();
            fieldsForValidation = null;
        }
            //PV
        else {
            if (comboValue != '' && comboValue > 0) {
                try {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("GetMemberRegisterProgramDynamicFields", "Member", new { area = "Application" })',
                        data: { programID: comboValue },
                        traditional: true,
                        cache: false,
                        async: false,
                        success: function (msg) {
                            $('#divClientReferenceControlData').html('');
                            if (msg != null && msg.length > 0) {
                                $('#divClientReferenceControlData').html(msg);
                            }
                        }

                    });
                    GetFieldsForValidation(comboValue);


                } catch (e) {
                    $('#divClientReferenceControlData').html(msg);
                }
            }
        }

    }

    function OnEffectiveDateChange(e) {
        // Check if there is a programconfig and add days to get the expiration date accordingly.
        var daysAddedToEffectiveDate = null;

        for (var i = 0, l = fieldsForValidation.length; i < l; i++) {
            if (fieldsForValidation[i].Name == "DaysAddedToEffectiveDate") {
                daysAddedToEffectiveDate = parseInt(fieldsForValidation[i].Value, 10);
            }
        }

        if (daysAddedToEffectiveDate != null) {
            var currentVal = Date.parseExact($(e.sender.element).val(), "M/d/yyyy");
            currentVal.add(daysAddedToEffectiveDate).days();


            var expirationDate = $("#ExpirationDate").data("kendoDatePicker");
            expirationDate.value(currentVal);
        }

    }

    function OnExpirationDateChange(e) {

    }
</script>
<form method="post" action="" id="form-Member">
    <div class="with-padding-with-panels popupcontainer">
        <fieldset class="fieldset">
            <legend class="legend">Members</legend>
            @Html.HiddenFor(m => m.CaseID)
            <div style="margin-bottom: 10px;">
                <label for="Prefix" class="label-no-inline">
                    Program <span class="spanstar">*</span>
                </label>
                @(Html.Kendo().ComboBox()
            .BindTo(ViewData[Martex.DMS.ActionFilters.StaticData.ProgramsForMember.ToString()] as IEnumerable<SelectListItem>)
            .Name("ProgramID")
            .Events(events =>
            {
                events.Change("onComboBoxChange_ClientReference");
            })
            .Suggest(true)
            .Filter(FilterType.StartsWith).MinLength(0)
            .HtmlAttributes(new { style = "width:350px;" })

                )
            </div>
            <div id="divClientReferenceControlData">
            </div>
            <div style="margin-bottom: 10px;">
                <label for="Prefix" class="label-no-inline">
                    Prefix <span id="RequirePrefix" class="spanstar">*</span>
                </label>
                @(Html.Kendo().ComboBoxFor(m => m.Prefix)
            .BindTo(ViewData[Martex.DMS.ActionFilters.StaticData.Prefix.ToString()] as IEnumerable<SelectListItem>)
            .Name("Prefix")
            .HtmlAttributes(new { style = " " })
            .Events(events =>
            {
                events.Change("ValidateInputForKendoCombo");
            })
            .Suggest(true)
            .Filter(FilterType.StartsWith).MinLength(0)
                )
            </div>
            <p class="inline-label">
                <label for="FirstName" class="label">
                    First Name <span id="RequireFirstName" class="spanstar">*</span>
                </label>
                @Html.TextBoxFor(m => m.FirstName, new { @class = "validate[maxSize[50],custom[onlyLetterSp]], input full-width2" })
            </p>
            <p class="inline-label">
                <label for="MiddleName" class="label">
                    Middle Name
                </label>
                @Html.TextBoxFor(m => m.MiddleName, new { @class = "validate[maxSize[50],custom[onlyLetterSp]], input full-width2" })
            </p>
            <p class="inline-label">
                <label for="LastName" class="label">
                    Last Name <span id="RequireLastName" class="spanstar">*</span>
                </label>
                @Html.TextBoxFor(m => m.LastName, new { @class = "validate[maxSize[50],custom[onlyLetterSp]], input full-width2" })
            </p>
            <div class="inline-label" style="margin-bottom: 10px;">
                <label for="Suffix" class="label">
                    Suffix<span id="RequireSuffix" class="spanstar">*</span>
                </label>
                @(Html.Kendo().ComboBoxFor(m => m.Prefix)
            .BindTo(ViewData[Martex.DMS.ActionFilters.StaticData.Suffix.ToString()] as IEnumerable<SelectListItem>)
            .Name("Suffix")
            .HtmlAttributes(new { style = " " })
            .Events(events =>
            {
                events.Change("ValidateInputForKendoCombo");
            })
            .Suggest(true)
            .Filter(FilterType.StartsWith).MinLength(0)
                )
            </div>
            <p class="inline-label">
                <label for="Phone" class="label">
                    Phone <span id="RequirePhone" class="spanstar">*</span>
                </label>
                @Html.Editor("PhoneNumber", "Phone", new { Value = Model.PhoneNumber, ShowPhoneType = true, PhoneTypeValue = Model.PhoneType, CallType = "Member" })
            </p>
            @Html.Partial("_AddressDetails", Model)
            <p class="inline-label">
                <label for="Email" class="label">
                    Email<span id="RequireEmail" class="spanstar">*</span>
                </label>
                @Html.TextBoxFor(m => m.Email, new { @class = "validate[maxSize[50],custom[email]], input full-width2" })
            </p>
            <!-- Effective and Expiry date -->
            <div id="divEffectiveDate">
                <p class="button-height inline-label small-margin-bottom">
                    <label for="EffectiveDate" class="label">
                        Effective Date<span id="RequireEffectiveDate" class="spanstar">*</span>
                    </label>
                    @*<span class="input"><span class="icon-calendar"></span>
                            @Html.TextBoxFor(m => m.EffectiveDate, new { @class = "input-unstyled datepicker validate[funcCall[CheckDate]]" })
                        </span>*@
                    @(Html.Kendo().DatePickerFor(u => u.EffectiveDate)
                                    .HtmlAttributes(new { style = "width:35% ", id = "EffectiveDate", type = "text" })
                                    .Events(e => e.Change("OnEffectiveDateChange"))
                    )
                    @*@Html.Partial("_Help", "If ARS Program enter the date of purchase")*@
                </p>
            </div>
            <div id="divExpirationDate">
                <p class="button-height inline-label small-margin-bottom">
                    <label for="ExpirationDate" class="label">
                        Expiration Date<span id="RequireExpirationDate" class="spanstar">*</span>
                    </label>
                    @*<span class="input"><span class="icon-calendar"></span>
                            @Html.TextBoxFor(m => m.ExpirationDate, new { @class = "input-unstyled datepicker validate[funcCall[CheckDate]]" })
                        </span>*@
                    @(Html.Kendo().DatePickerFor(u => u.ExpirationDate)
                                            .HtmlAttributes(new { style = "width:35% ", id = "ExpirationDate", type = "text" })
                                            .Events(e => e.Change("OnExpirationDateChange"))
                    )
                    @*@Html.Partial("_Help", "If ARS Program add number of months to Effective Date (date of purchase) based on that ARS Program's rules.")*@
                </p>
            </div>
            <div class="field-block button-height">
                <button id="btnAddMember" class="button green-gradient glossy float-right mid-margin-left"
                        type="submit">
                    Save
                </button>
                <button id="btnCancelMember" class="button gray-gradient glossy  float-right" type="button">
                    Cancel
                </button>
            </div>
        </fieldset>
    </div>
</form>
<script src="@Url.Content("~/Scripts/form2object.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/MemberRegistration-1.1.js?v=6")" type="text/javascript"></script>
<script language="javascript" type="text/javascript">

    $(function () {
        WatchMyContainer('form-Member', null, null);

        //KB: Set the width of the dropdown container to be 250px
        $("#ProgramID").data("kendoComboBox").list.width(250);

        $(".datepicker").datepicker({
            defaultDate: "+1w",
            changeMonth: true,
            numberOfMonths: 1
        });
        setTimeout(function () {
            console.log('setting program');
            var childProgID = '@ViewData["SelectedProgramID"]';
            var parentProgID = '@DMSCallContext.ProgramID';
            var progDropdown = $("#ProgramID").data("kendoComboBox")
            var progVal = null;
            if ($.trim(childProgID).length > 0) {
                progVal = childProgID;
                console.log('setting the program ID to ' + progVal);
                progDropdown.value(childProgID);
            }
            else {
                progVal = parentProgID;
                console.log('setting the selected index to 0');
                progDropdown.select(0);
            }

            $('input[name="ProgramID_input"]').focus();
            $('input[name="ProgramID_input"]').select();

            if (progVal != null && $.trim(progVal).length > 0) {
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetMemberRegisterProgramDynamicFields", "Member", new { area = "Application" })',
                    data: {programID: progVal },
                    traditional: true,
                    cache: false,
                    async: false,
                    success: function (msg) {
                        if (msg != null && msg.length > 0) {
                            $('#divClientReferenceControlData').html(msg);
                        }
                    }

                });
                GetFieldsForValidation(progVal);
            }


        }, 600);
    });
</script>
