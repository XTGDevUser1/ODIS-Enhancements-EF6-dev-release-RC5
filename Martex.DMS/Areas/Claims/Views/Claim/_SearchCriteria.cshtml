@using Martex.DMS.DAL.Entities.Claims;
@using Kendo.Mvc.UI
@using Martex.DMS.DAL;
@model ClaimSearchCriteria
@{
    int i = 0;
    string userId = System.Web.Security.Membership.GetUser(true).ProviderUserKey.ToString();
    string uniqueID = System.Guid.NewGuid().ToString();
    string pageName = "Claims";
    string JSMethodNameToCollectData = "GetClaimSearchCriteria";
    string tragetSaveMethodName = "SaveFilterSearchCriteriaForClaims";
    string applyCallBackFuntion = "LoadClaimPredefinedViews";
}
<style type="text/css">
    input.full-width
    {
        width: 90% !important;
    }
    .humidity
    {
        background-color: White;
    }
    .k-slider-track
    {
        background-color: White !important;
    }
    .k-slider-tooltip
    {
        background-color: White !important;
    }
</style>
<script type="text/javascript">
    function Client_onChange(e) {
        var combo = $("#Claim_Search_ClientID").data('kendoComboBox');
        if (!IsUserInputValidForChangeOnKendoCombo(combo)) {
            e.preventDefault();
        }

        var comboProgram = $("#Claim_Search_ProgramID").data('kendoComboBox');
        $.ajax({
            url: '@Url.Action("GetPrograms", "Member", new { area = "MemberManagement" })',
            data: { clientID: combo.value() },
            success: function (msg) {
                comboProgram.setDataSource(msg);
                comboProgram.select(0);
                SetFocusOnField("Claim_Search_ProgramID");
            }

        })
    }

    function rangeSliderChange(e) {
        if (e.values) {
            var minValue = e.values[0];
            var maxValue = e.values[1];
            $('#ClaimAmountStart').val(minValue);
            $('#ClaimAmountEnd').val(maxValue);
        }
    }
</script>
<li>
    <form id="frmClaimSearchCriteria" action="javascript:void(0)" method="post">
    @Html.Hidden("ClaimSearchViewID", string.Empty)
    @Html.HiddenFor(u => u.GridSortOrder)
    @Html.HiddenFor(u => u.GridSortColumnName)
    @Html.HiddenFor(u => u.ResetModelCriteria)
    @Html.HiddenFor(u => u.PanelItemsSelected)
    @Html.HiddenFor(u => u.PanelViewsSelected)
    @Html.HiddenFor(u => u.PanelIDSelected)
    @Html.HiddenFor(u => u.PanelNameSelected)
    @Html.HiddenFor(u => u.PanelClaimTypeSelected)
    @Html.HiddenFor(u => u.PanelClaimCategorySelected)
    @Html.HiddenFor(u => u.PanelClaimStatusSelected)
    @Html.HiddenFor(u => u.PanelClientProgramSelected)
    @Html.HiddenFor(u => u.PanelClaimDateRangeSelected)
    @Html.HiddenFor(u => u.PanelClaimAmountRangeSelected)
    @Html.HiddenFor(u => u.PanelCheckInformationSelected)
    @Html.HiddenFor(u => u.PanelExportBatchSelected)
    @Html.HiddenFor(u => u.PanelReadyForPaymentDateRange)
    @Html.HiddenFor(u => u.PanelACESClaimStatus)
    @(Html.Kendo().PanelBar()

    .Name("panelbarSearchCriteria")
    .ExpandMode(PanelBarExpandMode.Multiple)
    .Events(events => events.Collapse("fnPanelCollapseR").Expand("fnPanelExpandR"))
    .Items(panelbar =>
    {
        panelbar.Add().Text("Search").Content(
             @<div class="with-padding">
                 <p class="button-height">
                     <a href="javascript:void(0)" class="button icon-search big green-gradient full-width" onclick="GetSelectedCriteria();">Search
                     </a>
                 </p>
             </div>
             ).Expanded(true).LinkHtmlAttributes(new { id = "Panel_PanelSearch" });

        panelbar.Add().Text("Views").Content(
            @<div class="with-padding small-margin-right">
                @Html.Editor("FilterView", "FilterView", new
           {
               filterView = new Martex.DMS.DAL.Entities.FilterViewEntity(pageName, userId, applyCallBackFuntion, uniqueID, tragetSaveMethodName, JSMethodNameToCollectData)
           })
            </div>
        ).Expanded(Model.PanelViewsSelected).LinkHtmlAttributes(new { id = "Panel_PanelViewsSelected" });

        panelbar.Add().Text("Items Selected").Content(
              @<div class="with-padding" id="claimSelectedSearchCriteriaDetails">
                  @Html.Partial("_SelectedCriteria", Model)
              </div>
          ).Expanded(Model.PanelItemsSelected).LinkHtmlAttributes(new { id = "Panel_PanelItemsSelected" });


        panelbar.Add().Text("Number").Expanded(Model.PanelIDSelected.HasValue ? Model.PanelIDSelected.Value : true).LinkHtmlAttributes(new { id = "Panel_PanelIDSelected" })
            .Content(@<div class="with-padding">
                <div class="button-height inline-label small-margin-bottom">
                    <label class="label">
                        Type
                    </label>
                    @(Html.Kendo().ComboBoxFor(u => Model.LookUpTypeName)
                    .BindTo(ViewData[Martex.DMS.ActionFilters.StaticData.ClaimIDFilterTypes.ToString()] as IEnumerable<SelectListItem>)
                    .SelectedIndex(0)
                    .HighlightFirst(true)
                    .Suggest(true)
                    .Filter(FilterType.StartsWith).MinLength(0)
                    .Events(events => events.Change("ValidateInputForKendoCombo"))
                    .Value(string.IsNullOrEmpty(Model.LookUpTypeName) ? string.Empty : Model.LookUpTypeName)
                    .HtmlAttributes(new { style = "width:90%;" })
                    .Suggest(true)
                    )
                </div>
                <p class="inline-label">
                    <label for="ID" class="label">
                        Number</label>
                    @Html.TextBoxFor(u => Model.LookUpTypeValue, new { @class = "input full-width" })</p>
            </div>
            );

        panelbar.Add().Text("Name").Expanded(Model.PanelNameSelected.HasValue ? Model.PanelNameSelected.Value : true).LinkHtmlAttributes(new { id = "Panel_PanelNameSelected" })
            .Content(@<div class="with-padding">
                <div class="button-height inline-label small-margin-bottom">
                    <label class="label">
                        Type
                    </label>
                    @(Html.Kendo().ComboBoxFor(u => Model.NameTypeName)
                    .BindTo(ViewData[Martex.DMS.ActionFilters.StaticData.ClaimNameFilterTypes.ToString()] as IEnumerable<SelectListItem>)
                    .SelectedIndex(0)
                    .HighlightFirst(true)
                    .Filter(FilterType.StartsWith).MinLength(0)
                    .Suggest(true)
                    .Events(events => events.Change("ValidateInputForKendoCombo"))
                    .Value(string.IsNullOrEmpty(Model.NameTypeName) ? string.Empty : Model.NameTypeName)
                    .HtmlAttributes(new { style = "width:90%;" })
                    .Suggest(true)
                    )
                </div>
                <p class="inline-label">
                    <label class="label">
                        Name</label>
                    @Html.TextBoxFor(u => Model.NameTypeValue, new { @class = "input full-width" })
                </p>
                <div class="button-height inline-label small-margin-bottom">
                    <label class="label">
                        value that
                    </label>
                    @(Html.Kendo().ComboBoxFor(u => Model.NameOperatorValue)
                    .BindTo(ViewData[Martex.DMS.ActionFilters.StaticData.SearchFilterTypes.ToString()] as IEnumerable<SelectListItem>)
                    .SelectedIndex(0)
                    .HighlightFirst(true)
                    .Suggest(true)
                    .Filter(FilterType.StartsWith).MinLength(0)
                    .Events(events => events.Change("ValidateInputForKendoCombo"))
                    .Value(string.IsNullOrEmpty(Model.NameOperatorValue) ? string.Empty : Model.NameOperatorValue)
                    .HtmlAttributes(new { style = "width:90%;" })
                    .Suggest(true)
                    )
                </div>
            </div>
            );

        panelbar.Add().Text("Claim Type").Expanded(Model.PanelClaimTypeSelected).LinkHtmlAttributes(new { id = "Panel_PanelClaimTypeSelected" })
       .Content(@<div class="with-padding" id="ChkSearchClaimTypes">
           @if (Model.ClaimTypes != null && Model.ClaimTypes.Count > 0)
           {
               for (i = 0; i < Model.ClaimTypes.Count; i++)
               {
               <div class="with-small-padding">
                   <div>
                       @Html.HiddenFor(u => Model.ClaimTypes[i].ID)
                       @Html.HiddenFor(u => Model.ClaimTypes[i].Name)
                       @Html.CheckBoxFor(u => Model.ClaimTypes[i].Selected, new { @class = "checkbox", recorID = Model.ClaimTypes[i].ID, recordName = Model.ClaimTypes[i].Name })
                       @Model.ClaimTypes[i].Name
                   </div>
               </div>
               }

           }
       </div>
        );
        panelbar.Add().Text("Claim Status").Expanded(Model.PanelClaimStatusSelected).LinkHtmlAttributes(new { id = "Panel_PanelClaimStatusSelected" })
       .Content(@<div class="with-padding" id="ChkSearchClaimStatus">
           @if (Model.ClaimTypes != null && Model.ClaimStatus.Count > 0)
           {
               for (i = 0; i < Model.ClaimStatus.Count; i++)
               {
               <div class="with-small-padding">
                   <div>
                       @Html.HiddenFor(u => Model.ClaimStatus[i].ID)
                       @Html.HiddenFor(u => Model.ClaimStatus[i].Name)
                       @Html.CheckBoxFor(u => Model.ClaimStatus[i].Selected, new { @class = "checkbox ClaimStatus_ChkBox_Criteria", recordID = Model.ClaimStatus[i].ID, recordName = Model.ClaimStatus[i].Name })
                       @Model.ClaimStatus[i].Name
                   </div>
               </div>
               }

           }
       </div>
        ).ContentHtmlAttributes(new { id = "pnlClaimStatus" });


        panelbar.Add().Text("ACES Claim Status").Expanded(Model.PanelACESClaimStatus).LinkHtmlAttributes(new { id = "Panel_PanelACESClaimStatus" })
      .Content(@<div class="with-padding" id="ChkSearchACESClaimTypes">
          @if (Model.ACESStatus != null && Model.ACESStatus.Count > 0)
          {
              for (i = 0; i < Model.ACESStatus.Count; i++)
              {
              <div class="with-small-padding">
                  <div>
                      @Html.HiddenFor(u => Model.ACESStatus[i].ID)
                      @Html.HiddenFor(u => Model.ACESStatus[i].Name)
                      @Html.CheckBoxFor(u => Model.ACESStatus[i].Selected, new { @class = "checkbox", recorID = Model.ACESStatus[i].ID, recordName = Model.ACESStatus[i].Name })
                      @Model.ACESStatus[i].Name
                  </div>
              </div>
              }

          }
      </div>
       );

        panelbar.Add().Text("Claim Category").Expanded(Model.PanelClaimCategorySelected).LinkHtmlAttributes(new { id = "Panel_PanelClaimCategorySelected" })
       .Content(@<div class="with-padding" id="ChkSearchClaimCategory">
           @if (Model.ClaimTypes != null && Model.ClaimStatus.Count > 0)
           {
               for (i = 0; i < Model.ClaimCategory.Count; i++)
               {
               <div class="with-small-padding">
                   <div>
                       @Html.HiddenFor(u => Model.ClaimCategory[i].ID)
                       @Html.HiddenFor(u => Model.ClaimCategory[i].Name)
                       @Html.CheckBoxFor(u => Model.ClaimCategory[i].Selected, new { @class = "checkbox", recorID = Model.ClaimCategory[i].ID, recordName = Model.ClaimCategory[i].Name })
                       @Model.ClaimCategory[i].Name
                   </div>
               </div>
               }

           }
       </div>
        );

        panelbar.Add().Text("Client/Program").Expanded(Model.PanelClientProgramSelected).LinkHtmlAttributes(new { id = "Panel_PanelClientProgramSelected" })
                .Content(@<div class="with-padding">
                    <div class="button-height inline-label small-margin-bottom">
                        <label for="Client" class="label">
                            Client</label>
                        @(Html.Kendo().ComboBoxFor(u => u.ClientID)
                            .Filter(FilterType.StartsWith).MinLength(0)
                            .Suggest(true)
                            .SelectedIndex(0)
                            .Events(events => events.Change("Client_onChange"))
                            .HtmlAttributes(new { style = "width:90%;", id = "Claim_Search_ClientID" })
                            .BindTo(ViewData[Martex.DMS.ActionFilters.StaticData.Clients.ToString()] as IEnumerable<SelectListItem>)
                            .Value(Model.ClientID.HasValue ? Model.ClientID.Value.ToString() : string.Empty)
                            )
                    </div>
                    <div class="button-height inline-label small-margin-bottom">
                        <label for="Program" class="label">
                            Program</label>
                        @(Html.Kendo().ComboBoxFor(u => u.ProgramID)
                            .Filter(FilterType.StartsWith).MinLength(0)
                            .Suggest(true)
                            .SelectedIndex(0)
                            .Events(events => events.Change("ValidateInputForKendoCombo"))
                            .HtmlAttributes(new { style = "width:90%;", id = "Claim_Search_ProgramID" })
                            .BindTo(ViewData[Martex.DMS.ActionFilters.StaticData.ProgramsForClient.ToString()] as IEnumerable<SelectListItem>)
                            .Value(Model.ProgramID.HasValue ? Model.ProgramID.Value.ToString() : string.Empty)
                            )
                    </div>
                </div>
             );

        panelbar.Add().Text("Received Date").Expanded(Model.PanelReceivedDateSelected).LinkHtmlAttributes(new { id = "Panel_PanelReceivedDateSelected" })
        .Content(@<div class="with-padding">
            <div class="button-height inline-label">
                <label class="label">
                    From</label>
                @(Html.Kendo().DatePickerFor(u => u.ReceivedFromDate)
                    .HtmlAttributes(new { style = "width:90%" })
                    )
            </div>
            <div class="button-height inline-label">
                <label class="label">
                    To</label>
                @(Html.Kendo().DatePickerFor(u => u.ReceivedToDate)
                            .HtmlAttributes(new { style = "width:90%" })
                    )
            </div>
        </div>
        );

              panelbar.Add().Text("Claim Date Range").Expanded(Model.PanelClaimDateRangeSelected).LinkHtmlAttributes(new { id = "Panel_PanelClaimDateRangeSelected" })
              .Content(@<div class="with-padding">
            <div class="button-height inline-label">
                <label class="label">
                    Preset</label>
                @(Html.Kendo().NumericTextBoxFor(u => u.Preset)
                    .Spinners(false)
                    .Min(1)
                    .Format("n0")
                    .HtmlAttributes(new { style = "width:90%" })
                    )
            </div>
            <div class="button-height inline-label">
                <label class="label">
                    From</label>
                @(Html.Kendo().DatePickerFor(u => u.ClaimDateFrom)
                    .HtmlAttributes(new { style = "width:90%" })
                    )
            </div>
            <div class="button-height inline-label">
                <label class="label">
                    To</label>
                @(Html.Kendo().DatePickerFor(u => u.ClaimDateTo)
                            .HtmlAttributes(new { style = "width:90%" })
                    )
            </div>
        </div>
              );

              panelbar.Add().Text("ACES Submit Date").Expanded(Model.PanelACESSubmitDateSelected).LinkHtmlAttributes(new { id = "Panel_PanelACESSubmitDateSelected" })
              .Content(@<div class="with-padding">
            <div class="button-height inline-label">
                <label class="label">
                    From</label>
                @(Html.Kendo().DatePickerFor(u => u.ACESSubmitFromDate)
                    .HtmlAttributes(new { style = "width:90%" })
                    )
            </div>
            <div class="button-height inline-label">
                <label class="label">
                    To</label>
                @(Html.Kendo().DatePickerFor(u => u.ACESSubmitToDate)
                            .HtmlAttributes(new { style = "width:90%" })
                    )
            </div>
        </div>
              );

              panelbar.Add().Text("ACES Cleared Date").Expanded(Model.PanelACESClearedDateSelected).LinkHtmlAttributes(new { id = "Panel_PanelACESClearedDateSelected" })
              .Content(@<div class="with-padding">
            <div class="button-height inline-label">
                <label class="label">
                    From</label>
                @(Html.Kendo().DatePickerFor(u => u.ACESClearedFromDate)
                    .HtmlAttributes(new { style = "width:90%" })
                    )
            </div>
            <div class="button-height inline-label">
                <label class="label">
                    To</label>
                @(Html.Kendo().DatePickerFor(u => u.ACESClearedToDate)
                            .HtmlAttributes(new { style = "width:90%" })
                    )
            </div>
        </div>
              );

              panelbar.Add().Text("Claim Amount Range").Expanded(Model.PanelClaimAmountRangeSelected).LinkHtmlAttributes(new { id = "Panel_PanelClaimAmountRangeSelected" })
               .Content(@<div class="with-padding">
             <div class="small-margin-left">
                 <span class="small-margin-top mid-margin-right float-left">$0</span>
                 @(Html.Kendo().RangeSlider()
            .Name("AmountRangeSlider")
            .Min(0)
            .Max(10000)
            .SmallStep(2)
            .LargeStep(10)
                    .Events(events => events
                    .Change("rangeSliderChange"))
                    .HtmlAttributes(new { style = "float:left;width:150px;" })
            )
                 <span class="small-margin-top mid-margin-left float-left">$10000</span>
                 <div class="clear">
                 </div>
                 @Html.HiddenFor(u => u.ClaimAmountStart)
                 @Html.HiddenFor(u => u.ClaimAmountEnd)
             </div>
         </div>
               );



              panelbar.Add().Text("Check Information").Expanded(Model.PanelCheckInformationSelected).LinkHtmlAttributes(new { id = "Panel_PanelCheckInformationSelected" })
              .Content(@<div class="with-padding">
            <div class="button-height inline-label">
                <label class="label">
                    Check Number</label>
                @Html.TextBoxFor(u => Model.CheckNumber, new { @class = "input full-width" })
            </div>
            <div class="button-height inline-label">
                <label class="label">
                    From Date</label>
                @(Html.Kendo().DatePickerFor(u => u.CheckFromDate)
                    .HtmlAttributes(new { style = "width:90%" })
                    )
            </div>
            <div class="button-height inline-label">
                <label class="label">
                    To Date</label>
                @(Html.Kendo().DatePickerFor(u => u.CheckToDate)
                            .HtmlAttributes(new { style = "width:90%" })
                    )
            </div>
        </div>
              );
              //TFS 2020 
        @*panelbar.Add().Text("Ready For Payment Date Range").Expanded(Model.PanelReadyForPaymentDateRange).LinkHtmlAttributes(new { id = "Panel_PanelReadyForPaymentDateRange" })
        .Content(@<div class="with-padding">
            <div class="button-height inline-label">
                <label class="label">
                    From</label>
                @(Html.Kendo().DatePickerFor(u => u.ReadyForPaymentStartDate)
                    .HtmlAttributes(new { style = "width:90%" })
                    )
            </div>
            <div class="button-height inline-label">
                <label class="label">
                    To</label>
                @(Html.Kendo().DatePickerFor(u => u.ReadyForPaymentEndDate)
                            .HtmlAttributes(new { style = "width:90%" })
                    )
            </div>
        </div>
        );*@
              panelbar.Add().Text("Export Batch").Expanded(Model.PanelExportBatchSelected).LinkHtmlAttributes(new { id = "Panel_PanelExportBatchSelected" })
              .Content(@<div class="with-padding">
            <div class="button-height inline-label small-margin-right">
                <label class="label">
                    Batch</label>
                @(Html.Kendo().ComboBoxFor(u => Model.ExportBatchID)
                .BindTo(ViewData[Martex.DMS.ActionFilters.StaticData.ExportBatchesForClaim.ToString()] as IEnumerable<SelectListItem>)
                .SelectedIndex(0)
                .HighlightFirst(true)
                .Suggest(true)
                .Value(Model.ExportBatchID.HasValue ? Model.ExportBatchID.Value.ToString() : string.Empty)
                .Filter(FilterType.StartsWith).MinLength(0)
                .Events(events => events.Change("ValidateInputForKendoCombo"))
                .HtmlAttributes(new { style = "width:90%;" })
                )
            </div>
        </div>
             );

              panelbar.Add().Text("Search").Content(
                   @<div class="with-padding">
                 <p class="button-height">
                     <a href="javascript:void(0)" class="button icon-search big green-gradient full-width" onclick="GetSelectedCriteria();">Search
                     </a>
                 </p>
             </div>
             ).Expanded(true).LinkHtmlAttributes(new { id = "Panel_PanelSearch" });

    }))
    </form>
</li>
<script type="text/javascript">
    $(function () {

        $('.ClaimStatus_ChkBox_Criteria').change(function (e) {
            SynchronizeCheckBoxesForClaimsStatus();
        });
    });

    function LoadClaimPredefinedViews(recordID) {
        $('#ClaimSearchViewID').val(recordID);
        GetSearchCriteria();
        SynchronizeCheckBoxesForClaimsStatus();
        var gridReference = $('#GrdClaims').data('kendoGrid').dataSource;

        var sortOrder = $('#GridSortOrder').val();
        var sortColumn = $('#GridSortColumnName').val();
        if (sortOrder != undefined && sortColumn != undefined) {
            gridReference.sort({ field: sortColumn, dir: sortOrder });
        }
        gridReference.read();
        setTimeout(function () {
            $('#ClaimSearchViewID').val('');
        }, 1000);
    }


    function SynchronizeCheckBoxesForClaimsStatus() {
        $("#frmClaimSearchCriteria").find("#ChkSearchClaimStatus input:checkbox").each(function (index) {
            var recordID = $(this).attr('recordID');
            var isRecordSelected = $(this).is(':checked');
            if (recordID != undefined && isRecordSelected != undefined) {
                $('#ClaimFilterTopButtons').find("input:checkbox").each(function (index) {
                    var topRecordID = $(this).attr('value');
                    if (topRecordID != undefined) {
                        if (topRecordID == recordID) {
                            SelectUnSelectRbStatus(topRecordID, isRecordSelected);
                        }
                    }
                });
            }
        });
    }

    function SelectUnSelectRbStatus(topRecordID, checked) {
        var rbStatuslabel = $("label[for='display-" + topRecordID + "']");
        if (checked) {
            rbStatuslabel.addClass("active");
            rbStatuslabel.find("input").attr("checked", "checked");
        }
        else {
            rbStatuslabel.removeClass("active");
            rbStatuslabel.find("input").removeAttr("checked");
        }
    }
</script>
