@model Martex.DMS.DAL.Entities.VendorInvoiceSearchCriteria
@using Kendo.Mvc.UI
@using Martex.DMS.DAL;
@{
    int i = 0;
    string userId = System.Web.Security.Membership.GetUser(true).ProviderUserKey.ToString();
    string uniqueID = System.Guid.NewGuid().ToString();
    string pageName = "VendorInvoices";
    string JSMethodNameToCollectData = "GetVendorSearchCriteria";
    string tragetSaveMethodName = "SaveFilterSearchCriteriaForVendorInvoices";
    string applyCallBackFuntion = "LoadVendorInvoicePredefinedViews";
}
<style type="text/css">
    input.full-width
    {
        width: 90% !important;
    }
</style>
<li>
    <form id="frmVendorInvoiceSearchCriteria">
    @Html.Hidden("VendorInvoiceSearchViewID", string.Empty)
    @Html.HiddenFor(u => u.GridSortOrder)
    @Html.HiddenFor(u => u.GridSortColumnName)
    @Html.HiddenFor(u => u.PanelItemsSelected)
    @Html.HiddenFor(u => u.PanelViewsSelected)
    @Html.HiddenFor(u => u.PanelIDSelected)
    @Html.HiddenFor(u => u.PanelNameSelected)
    @Html.HiddenFor(u => u.PanelInvoiceStatusSelected)
    @Html.HiddenFor(u => u.PanelPOStatusSelected)
    @Html.HiddenFor(u => u.PanelDateRangeSelected)
    @Html.HiddenFor(u => u.PanelExportStatusSelected)
    @Html.HiddenFor(u => u.ResetModelCriteria)
    @(Html.Kendo().PanelBar()
    .Name("panelbarSearchCriteria")
    .ExpandMode(PanelBarExpandMode.Multiple)
    .Events(events => events.Collapse("fnPanelCollapseR").Expand("fnPanelExpandR"))
    .Items(panelbar =>
    {

        panelbar.Add().Text("Search").Content(
             @<div class="with-padding">
                 <p class="button-height">
                     <a href="javascript:void(0)" class="button icon-search big green-gradient full-width" onclick="GetSelectedCriteria();">Search
                     </a>
                 </p>
             </div>
        ).Expanded(true).LinkHtmlAttributes(new { id = "Panel_PanelSearch" });

        panelbar.Add().Text("Views").Content(
            @<div class="with-padding small-margin-right">
                @Html.Editor("FilterView", "FilterView", new
           {
               filterView = new Martex.DMS.DAL.Entities.FilterViewEntity(pageName, userId, applyCallBackFuntion, uniqueID, tragetSaveMethodName, JSMethodNameToCollectData)
           })
            </div>
        ).Expanded(Model.PanelViewsSelected).LinkHtmlAttributes(new { id = "Panel_PanelViewsSelected" });

        panelbar.Add().Text("Items Selected").Content(
            @<div class="with-padding" id="vendorInvoiceSelectedSearchCriteria">
            @Html.Partial("_SelectedCriteria", Model)
            </div>
        ).Expanded(Model.PanelItemsSelected).LinkHtmlAttributes(new { id = "Panel_PanelItemsSelected" });
        panelbar.Add().Text("ID").Expanded(Model.PanelIDSelected.HasValue ? Model.PanelIDSelected.Value : true).LinkHtmlAttributes(new { id = "Panel_PanelIDSelected" })
            .Content(@<div class="with-padding">
                <div class="button-height inline-label small-margin-bottom">
                    <label for="NameSectionTypeValue" class="label">
                        Type
                    </label>
                    @(Html.Kendo().ComboBoxFor(u => Model.IDType)
                    .BindTo(ViewData[Martex.DMS.ActionFilters.StaticData.InvoiceTypes.ToString()] as IEnumerable<SelectListItem>)
                    .SelectedIndex(0)
                    .HighlightFirst(true)
                    .Suggest(true)
                    .Filter(FilterType.StartsWith).MinLength(0)
                    .Events(events => events.Change("ValidateInputForKendoCombo"))
                                    .Value(string.IsNullOrEmpty(Model.IDType) ? string.Empty : Model.IDType)
                    .HtmlAttributes(new { style = "width:90%;" })
                    )
                </div>
                <p class="inline-label">
                    <label for="ID" class="label">
                        ID</label>
                    @Html.TextBoxFor(u => Model.IDValue, new { @class = "input full-width" })</p>
            </div>
            );
        panelbar.Add().Text("Name").Expanded(Model.PanelNameSelected.HasValue ? Model.PanelNameSelected.Value : true).LinkHtmlAttributes(new { id = "Panel_PanelNameSelected" })
            .Content(@<div class="with-padding">
                <p class="inline-label">
                    <label for="ID" class="label">
                        Name</label>
                    @Html.TextBoxFor(u => Model.NameValue, new { @class = "input full-width" })
                </p>
                <div class="button-height inline-label small-margin-bottom">
                    <label for="NameSectionTypeValue" class="label">
                        value that
                    </label>
                    @(Html.Kendo().ComboBoxFor(u => Model.NameOperator)
                    .BindTo(ViewData[Martex.DMS.ActionFilters.StaticData.VendorSearchCriteriaNameFilterType.ToString()] as IEnumerable<SelectListItem>)
                    .SelectedIndex(0)
                    .HighlightFirst(true)
                            .Suggest(true)
                    .Filter(FilterType.StartsWith).MinLength(0)
                    .Events(events => events.Change("ValidateInputForKendoCombo"))
                    .Value(Model.NameOperator == null ? string.Empty : Model.NameOperator.Value.ToString())
                    .HtmlAttributes(new { style = "width:90%;" })
                    )
                </div>
            </div>
            );
        panelbar.Add().Text("Invoice Status").Expanded(Model.PanelInvoiceStatusSelected.HasValue ? Model.PanelInvoiceStatusSelected.Value : true).LinkHtmlAttributes(new { id = "Panel_PanelInvoiceStatusSelected" })
            .Content(@<div class="with-padding">
                @if (Model.InvoiceStatuses != null && Model.InvoiceStatuses.Count > 0)
                {
                    for (i = 0; i < Model.InvoiceStatuses.Count; i++)
                    {
                    <div class="with-small-padding">
                        <div>
                            @Html.HiddenFor(u => Model.InvoiceStatuses[i].ID)
                            @Html.HiddenFor(u => Model.InvoiceStatuses[i].Name)
                            @Html.CheckBoxFor(u => Model.InvoiceStatuses[i].Selected, new { @class = "checkbox InvoiceStatuses_ChkBox_Criteria", recorID = Model.InvoiceStatuses[i].ID, recordName = Model.InvoiceStatuses[i].Name })
                            @Model.InvoiceStatuses[i].Name
                        </div>
                    </div>
                    }

                }
            </div>
            ).ContentHtmlAttributes(new { id = "pnlInvoiceStatus" });

        panelbar.Add().Text("PO Status").Expanded(Model.PanelPOStatusSelected.HasValue ? Model.PanelPOStatusSelected.Value : true).LinkHtmlAttributes(new { id = "Panel_PanelPOStatusSelected" })
         .Content(@<div class="with-padding">
                @if (Model.POStatuses != null && Model.POStatuses.Count > 0)
                {
                    for (i = 0; i < Model.POStatuses.Count; i++)
                    {
                    <div class="with-small-padding">
                        <div>
                            @Html.HiddenFor(u => Model.POStatuses[i].ID)
                            @Html.HiddenFor(u => Model.POStatuses[i].Name)
                            @Html.CheckBoxFor(u => Model.POStatuses[i].Selected, new { @class = "checkbox", recorID = Model.POStatuses[i].ID, recordName = Model.POStatuses[i].Name })
                            @Model.POStatuses[i].Name
                        </div>
                    </div>
                    }

                }
            </div>
         ).ContentHtmlAttributes(new { id = "pnlPOStatus" });

        panelbar.Add().Text("Pay Status Code").Expanded(Model.PanelPayStatusCodeSelected.HasValue ? Model.PanelPayStatusCodeSelected.Value : true).LinkHtmlAttributes(new { id = "Panel_PanelPayStatusCodeSelected" })
        .Content(@<div class="with-padding">
                @if (Model.PayStatusCodes != null && Model.PayStatusCodes.Count > 0)
                {
                    for (i = 0; i < Model.PayStatusCodes.Count; i++)
                    {
                    <div class="with-small-padding">
                        <div>
                            @Html.HiddenFor(u => Model.PayStatusCodes[i].ID)
                            @Html.HiddenFor(u => Model.PayStatusCodes[i].Name)
                            @Html.CheckBoxFor(u => Model.PayStatusCodes[i].Selected, new { @class = "checkbox", recorID = Model.PayStatusCodes[i].ID, recordName = Model.PayStatusCodes[i].Name })
                            @Model.PayStatusCodes[i].Name
                        </div>
                    </div>
                    }

                }
            </div>
        ).ContentHtmlAttributes(new { id = "pnlPayStatusCodes" });

        panelbar.Add().Text("Exception Type").Expanded(Model.PanelExceptionTypesSelected.HasValue ? Model.PanelExceptionTypesSelected.Value : true).LinkHtmlAttributes(new { id = "Panel_PanelExceptionTypesSelected" })
        .Content(@<div class="with-padding">
                @if (Model.ExceptionTypes != null && Model.ExceptionTypes.Count > 0)
                {
                    for (i = 0; i < Model.ExceptionTypes.Count; i++)
                    {
                    <div class="with-small-padding">
                        <div>
                            @Html.HiddenFor(u => Model.ExceptionTypes[i].ID)
                            @Html.HiddenFor(u => Model.ExceptionTypes[i].Name)
                            @Html.CheckBoxFor(u => Model.ExceptionTypes[i].Selected, new { @class = "checkbox", recorID = Model.ExceptionTypes[i].ID, recordName = Model.ExceptionTypes[i].Name })
                            @Model.ExceptionTypes[i].Name
                        </div>
                    </div>
                    }

                }
            </div>
        ).ContentHtmlAttributes(new { id = "pnlExceptionTypes" });

        panelbar.Add().Text("Invoice Date Range").Expanded(Model.PanelDateRangeSelected.HasValue ? Model.PanelDateRangeSelected.Value : true).HtmlAttributes(new { id = "Panel_DateRange" }).LinkHtmlAttributes(new { id = "Panel_PanelDateRangeSelected" })
            .Content(@<div class="with-padding">
                <div class="button-height inline-label small-margin-right">
                    <label for="NameSectionTypeMemberLastName" class="label">
                        From</label>
                    @(Html.Kendo().DatePickerFor(u => u.InvoiceFrom)
                            // .Events(e => e.Change("StartDateChange"))
                    .HtmlAttributes(new { style = "width:90%" })
                    )
                </div>
                <div class="clear">
                </div>
                <div class="button-height inline-label small-margin-left">
                    <label for="DateSectionToDate" class="label">
                        To</label>
                    @(Html.Kendo().DatePickerFor(u => u.InvoiceTo)
                            //.Events(e => e.Change("EndDateChange"))
                            .HtmlAttributes(new { style = "width:90%" })
                    )
                </div>
            </div>
            );
        panelbar.Add().Text("To be paid Date Range").Expanded(Model.PanelDateRangeSelected.HasValue ? Model.PanelDateRangeSelected.Value : true).HtmlAttributes(new { id = "Panel_DateRange" }).LinkHtmlAttributes(new { id = "Panel_PanelDateRangeSelected" })
        .Content(@<div class="with-padding">
                <div class="button-height inline-label small-margin-right">
                    <label for="tobepaidfrom" class="label">
                        From</label>
                    @(Html.Kendo().DatePickerFor(u => u.ToBePaidFrom)
                            // .Events(e => e.Change("StartDateChange"))
                    .HtmlAttributes(new { style = "width:90%" })
                    )
                </div>
                <div class="clear">
                </div>
                <div class="button-height inline-label small-margin-left">
                    <label for="tobepaidto" class="label">
                        To</label>
                    @(Html.Kendo().DatePickerFor(u => u.ToBePaidTo)
                            //.Events(e => e.Change("EndDateChange"))
                            .HtmlAttributes(new { style = "width:90%" })
                    )
                </div>
            </div>
        );
        panelbar.Add().Text("Export Batch").Expanded(Model.PanelExportStatusSelected.HasValue ? Model.PanelExportStatusSelected.Value : true).LinkHtmlAttributes(new { id = "Panel_PanelExportStatusSelected" })
            .Content(@<div class="with-padding">
                <div class="button-height inline-label small-margin-bottom">
                    <label for="NameSectionTypeValue" class="label">
                        Run
                    </label>
                    @(Html.Kendo().ComboBoxFor(u => Model.ExportType)
                            .BindTo(ViewData[Martex.DMS.ActionFilters.StaticData.ExportBatchesForInvoice.ToString()] as IEnumerable<SelectListItem>)
                    .SelectedIndex(0)
                    .HighlightFirst(true)
                    .Suggest(true)
                    .Filter(FilterType.StartsWith).MinLength(0)
                    .Events(events => events.Change("ValidateInputForKendoCombo"))
                    .HtmlAttributes(new { style = "width:90%;" })
                    )
                </div>
            </div>
            );
        panelbar.Add().Text("Search").Content(
         @<div class="with-padding">
                 <p class="button-height">
                     <a href="javascript:void(0)" class="button icon-search big green-gradient full-width" onclick="GetSelectedCriteria();">Search
                     </a>
                 </p>
             </div>
    ).Expanded(true).LinkHtmlAttributes(new { id = "Panel_PanelSearch" });
    })
                                                                            )
    </form>
</li>
<script type="text/javascript">
    var defaultVendorInvoiceListDays = parseInt('@ViewData["DefaultVendorInvoiceListDays"]', 10);

    $(function () {
        var end = Date.now();
        var start = Date.now().addDays(-1 * defaultVendorInvoiceListDays);
        //$("#InvoiceFrom").data('kendoDatePicker').value(start);
        //$("#InvoiceTo").data('kendoDatePicker').value(end);
        //GetSelectedCriteria();
    });

    function LoadVendorInvoicePredefinedViews(recordID) {
        $('#VendorInvoiceSearchViewID').val(recordID);
        GetSearchCriteria();
        SynchronizeCheckBoxesForInvoiceStatus();
        var gridReference = $('#GrdVendorInvoices').data('kendoGrid').dataSource;

        var sortOrder = $('#GridSortOrder').val();
        var sortColumn = $('#GridSortColumnName').val();
        if (sortOrder != undefined && sortColumn != undefined) {
            gridReference.sort({ field: sortColumn, dir: sortOrder });
        }
        gridReference.read();
        setTimeout(function () {
            $('#VendorInvoiceSearchViewID').val('');
        }, 1000);
    }

    $(function () {
        $('.InvoiceStatuses_ChkBox_Criteria').change(function (e) {
            SynchronizeCheckBoxesForInvoiceStatus();
        });
    });

    function SynchronizeCheckBoxesForInvoiceStatus() {
        $("#frmVendorInvoiceSearchCriteria").find("#pnlInvoiceStatus input:checkbox").each(function (index) {
            var recordName = $(this).attr('recordName');
            var isRecordSelected = $(this).is(':checked');
            if (recordName != undefined && isRecordSelected != undefined) {
                $('#InvoiceFilterTopButtons').find("input:checkbox").each(function (index) {
                    var topRecordName = $(this).attr('value');
                    if (topRecordName != undefined) {
                        if (topRecordName == recordName) {
                            SelectUnSelectRbStatus(topRecordName, isRecordSelected);
                        }
                    }
                });
            }
        });
    }

    function SelectUnSelectRbStatus(name,checked) {
        var rbStatuslabel = $("label[for='display-" + name + "']");
        if (checked) {
            rbStatuslabel.addClass("active");
            rbStatuslabel.find("input").attr("checked", "checked");
        }
        else {
            rbStatuslabel.removeClass("active");
            rbStatuslabel.find("input").removeAttr("checked");
        }
    }
</script>
