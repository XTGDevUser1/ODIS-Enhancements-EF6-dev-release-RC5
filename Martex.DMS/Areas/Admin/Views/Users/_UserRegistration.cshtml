@model Martex.DMS.Models.RegisterUserModel
@using Kendo.Mvc.UI
@using Kendo.Mvc.UI;
@using Martex.DMS.Areas.Application.Models
@{
    ViewBag.Title = "User";
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    bool isEdit = false;
    bool isView = false;
    if (ViewData["mode"].ToString().Equals("edit") || ViewData["mode"].ToString().Equals("view"))
    {
        isEdit = true;
        if (ViewData["mode"].ToString().Equals("view"))
        {
            isView = true;
        }
    }
    var maxPasswordLength = 0;
    if (System.Configuration.ConfigurationManager.AppSettings["MaxPasswordLength"] != null)
    {
        maxPasswordLength = int.Parse(System.Configuration.ConfigurationManager.AppSettings["MaxPasswordLength"].ToString());
    }
    if (!isEdit)
    {
        if (Model != null)
        {
            Model.IsLockedOut = false;
        }

    }
    int? userPin = null;
    if(Model!=null)
    {
        userPin = Model.Pin;
    }
}
<link href="@Url.Content("~/Content/CustomStyle.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/Content/ui.multiselect.css?v=1")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/ui.multiselect.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/libs/formValidator/jquery.validationEngine.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/userRegistration.js")"></script>
<script language="javascript" type="text/javascript">


    function Organization_OnChange_Kendo(e) {
        var combo = $('#OrganizationID').data('kendoComboBox');
        if (!IsUserInputValidForChangeOnKendoCombo(combo)) {
            e.preventDefault();
        }
        if (combo.value() != '') {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("RolesForOrganization", "ReferenceData", new { area = "Common" })',
                data: { controlFor: "SelectedUserRoles", organizationId: combo.value() },
                traditional: true,
                cache: false,
                async: false,
                success: function (msg) {
                    $("#spUserRoles").html(msg);
                }

            });


            $.ajax({
                type: 'POST',
                url: '@Url.Action("DataGroupsForOrganization", "ReferenceData", new { area = "Common" })',
                data: { controlFor: "SelectedDataGroupsID", organizationId: combo.value() },
                traditional: true,
                cache: false,
                async: false,
                success: function (msg) {
                    $("#spDataGroups").html(msg);
                }

            });
        }
    }
</script>
<form method="post" action="" id="form-UserRegistration">
    <div class="with-padding-with-panels">
        <fieldset class="fieldset">
            <legend class="legend">User</legend>
            <div>
                <p class="inline-label">
                    <label for="UserName" class="label">
                        User Name<span class="spanstar">*</span>
                    </label>
                    @if (isEdit)
                    {
                        if (isView)
                        {
                            @Html.TextBoxFor(u => u.UserName, new { @class = "validate[required,maxSize[256]], input full-width2", disabled = "disabled", @readonly = "true" })
                        }
                        else
                        {
                            @Html.TextBoxFor(u => u.UserName, new { @class = "validate[required,maxSize[256]], input full-width2", @readonly = "readonly" })
                        }
                    }
                    else
                    {
                        @Html.TextBoxFor(u => u.UserName, new { @class = "validate[required,maxSize[256],noSpace], input full-width2", @error_required = "Please type your User name." })
                    }
                </p>
                <p class="inline-label">
                    <label for="FirstName" class="label">
                        First Name<span class="spanstar">*</span>
                    </label>
                    @if (isView)
                    {
                        @Html.TextBoxFor(u => u.FirstName, new { @class = "input full-width2", disabled = "disabled", @readonly = "readonly" })
                    }
                    else
                    {
                        @Html.TextBoxFor(u => u.FirstName, new { @class = "validate[required,maxSize[50]], input full-width2", @error_required = "Please type your first name.", maxlength = 50 })
                    }
                </p>
                <p class="inline-label">
                    <label for="LastName" class="label">
                        Last Name<span class="spanstar">*</span>
                    </label>
                    @if (isView)
                    {
                        @Html.TextBoxFor(u => u.LastName, new { @class = "input full-width2", disabled = "disabled", @readonly = "readonly" })
                    }
                    else
                    {
                        @Html.TextBoxFor(u => u.LastName, new { @class = "validate[required,maxSize[50]], input full-width2", @error_required = "Please type your last name.", maxlength = 50 })
                    }
                </p>
                <p class="inline-label">
                    <label for="Email" class="label">
                        Email<span class="spanstar">*</span>
                    </label>
                    @if (isView)
                    {
                        @Html.TextBoxFor(u => u.Email, new { @class = "validate[required,custom[email],maxSize[256]], input full-width2", disabled = "disabled", @readonly = "readonly" })
                    }
                    else
                    {
                        @Html.TextBoxFor(u => u.Email, new { @class = "validate[required,custom[email],maxSize[256]], input full-width2", maxlength = 256, @error_required = "Please type your email." })
                    }
                </p>
                <p class="inline-label">
                    <label for="AgentNumber" class="label">
                        Agent Number<span class="spanstar">*</span>
                    </label>
                    @if (isView)
                    {
                        @Html.TextBoxFor(u => u.AgentNumber, new { @class = "validate[required,maxSize[4]], input full-width2", maxlength = 4, disabled = "disabled", @readonly = "readonly" })
                    }
                    else
                    {
                        @Html.TextBoxFor(u => u.AgentNumber, new { @class = "validate[required,maxSize[4]], input full-width2", maxlength = 4, @error_required = "Please type agent number." })
                    }
                </p>
                <p class="inline-label">
                    <label for="PhoneUserID" class="label">
                        Phone UserID
                    </label>
                    @if (isView)
                    {
                        @Html.TextBoxFor(u => u.PhoneUserId, new { @class = "validate[maxSize[20]], input full-width2", disabled = "disabled", @readonly = "readonly" })
                    }
                    else
                    {
                        @Html.TextBoxFor(u => u.PhoneUserId, new { @class = "validate[maxSize[20]], input full-width2" })
                    }
                </p>
                <p class="inline-label">
                    <label for="PhonePassword" class="label">
                        Phone Password
                    </label>
                    @if (isView)
                    {
                        @Html.TextBoxFor(u => u.PhonePassword, new { @class = "validate[maxSize[20]], input full-width2", disabled = "disabled", @readonly = "readonly" })
                    }
                    else
                    {
                        @Html.TextBoxFor(u => u.PhonePassword, new { @class = "validate[maxSize[20]], input full-width2" })
                    }
                </p>
                @if (DMSSecurityProvider.GetAccessType(DMSSecurityProviderFriendlyName.TEXT_USER_PIN) == AccessType.ReadWrite)
                {
                    <p class="inline-label">
                        <label for="Pin" class="label">
                            PIN @*<span class="spanstar">*</span> TFS 1300*@ 
                        </label>
                        @if (isView)
                        {
                            @Html.TextBoxFor(u => u.Pin, new { @class = "validate[custom[integer]], input full-width2", disabled = "disabled", @readonly = "readonly" })
                        }
                        else
                        {
                            @Html.TextBoxFor(u => u.Pin, new { @class = "validate[custom[integer],minSize[4],maxSize[4]], input full-width2" })
                        }
                    </p>
                }
                else
                {
                    @Html.HiddenFor(a => a.Pin)
                }
                <p class="inline-label">
                    <div>
                        <label for="OrganizationID" class="label-no-inline">
                            Organization<span class="spanstar">*</span>
                        </label>
                        @if (isView)
                        {
                            @(Html.Kendo().ComboBox()
                        .Name("OrganizationID")
                        .Filter(Kendo.Mvc.UI.FilterType.StartsWith).MinLength(0)
                        .Events(events => events.Change("Organization_OnChange_Kendo"))
                        .Suggest(true)
                        .BindTo(new SelectList(ViewData[Martex.DMS.ActionFilters.StaticData.Organizations.ToString()] as IEnumerable<SelectListItem>, "Value", "Text", Model != null && Model.OrganizationID != null ? Model.OrganizationID.ToString() : ""))
                        .Enable(false)
                            )

                        }
                        else
                        {

                            @(Html.Kendo().ComboBox()
                        .Name("OrganizationID")
                        .Filter(Kendo.Mvc.UI.FilterType.StartsWith).MinLength(0)
                        .Events(events => events.Change("Organization_OnChange_Kendo"))
                        .Suggest(true)
                        .BindTo(new SelectList(ViewData[Martex.DMS.ActionFilters.StaticData.Organizations.ToString()] as IEnumerable<SelectListItem>, "Value", "Text", Model != null && Model.OrganizationID != null ? Model.OrganizationID.ToString() : ""))
                        .SelectedIndex(0)
                            )
                        }
                    </div>
                </p>
                <b>User Roles<span class="spanstar">*</span></b> <span id="spUserRoles">
                    @if (isView)
                    {
                        @Html.ListBoxFor(u => u.SelectedUserRoles, ViewData[Martex.DMS.ActionFilters.StaticData.UserRoles.ToString()] as IEnumerable<SelectListItem>, new { @class = "validate[required] uimultiselect eleven-columns", multiple = true, style = "height:100px;", disabled = "disabled" })
                    }
                    else
                    {
                        @Html.ListBoxFor(u => u.SelectedUserRoles, ViewData[Martex.DMS.ActionFilters.StaticData.UserRoles.ToString()] as IEnumerable<SelectListItem>, new { @class = "validate[required] uimultiselect eleven-columns", multiple = true, style = "height:100px;" })
                    }
                </span>
                <div class="clear">
                </div>
                <b>Data Groups</b> <span id="spDataGroups">
                    @if (isView)
                    {
                        @Html.ListBoxFor(u => u.SelectedDataGroupsID, ViewData[Martex.DMS.ActionFilters.StaticData.DataGroups.ToString()] as IEnumerable<SelectListItem>, new { @class = "uimultiselect eleven-columns", style = "height:100px;", disabled = "disabled", multiple = true })
                    }
                    else
                    {
                        @Html.ListBoxFor(u => u.SelectedDataGroupsID, ViewData[Martex.DMS.ActionFilters.StaticData.DataGroups.ToString()] as IEnumerable<SelectListItem>, new { @class = "uimultiselect eleven-columns", multiple = true, style = "height:100px;" })
                    }
                </span>
                <br />
                <div class="clear">
                </div>
                <p class="inline-label">
                    <label for="Password" class="label">
                        Password<span class="spanstar">*</span> <span class="info-spot">
                            <span class="icon-info-round">
                            </span><span class="info-bubble">
                                At least 7 characters.<br />
                                At least 1 special character.<br />
                                For example: ! @@ # $ % ^ & * ( ).<br />
                                Password is case sensitive.
                            </span>
                        </span>
                    </label>
                    @if (isView)
                    {
                        @Html.PasswordFor(u => u.Password, new { @class = "input full-width2 float-left", @id = "register_Password", disabled = "disabled", @readonly = "readonly" })
                    }
                    else if (isEdit)
                    {
                        @Html.PasswordFor(u => u.Password, new { @class = "validate[ maxSize[" + @maxPasswordLength + "],minSize[7]], input full-width2 float-left", maxlength = 128, @id = "register_Password", @error_required = "Please type your password." })
                    }
                    else
                    {
                        @Html.PasswordFor(u => u.Password, new { @class = "validate[required, maxSize[" + @maxPasswordLength + "],minSize[7]], input full-width2 float-left", maxlength = 128, @id = "register_Password", @error_required = "Please type your password." })
                    }
                </p>
                <p class="inline-label">
                    <label for="ConfirmPassword" class="label">
                        Confirm Password<span class="spanstar">*</span> <span class="info-spot">
                            <span class="icon-info-round">
                            </span><span class="info-bubble">
                                At least 7 characters.<br />
                                At least 1 special character.<br />
                                For example: ! @@ # $ % ^ & * ( ).<br />
                                Password is case sensitive.
                            </span>
                        </span>
                    </label>
                    @if (isView)
                    {
                        @Html.PasswordFor(u => u.ConfirmPassword, new { @class = "validate[required,maxSize[128],equals[register_Password]], input full-width2 float-left", disabled = "disabled", @readonly = "readonly" })
                    }
                    else if (isEdit)
                    {
                        @Html.PasswordFor(u => u.ConfirmPassword, new { @class = "validate[maxSize[128],equals[register_Password]], input full-width2 float-left", maxlength = 128, @error_required = "Please type your confirm password." })
                    }
                    else
                    {
                        @Html.PasswordFor(u => u.ConfirmPassword, new { @class = "validate[required,maxSize[128],equals[register_Password]], input full-width2 float-left", maxlength = 128, @error_required = "Please type your confirm password." })
                    }
                </p>
                <p class="inline-label">
                    <label for="Active" class="label">
                        Active
                    </label>
                    @if (isEdit)
                    {
                        if (isView)
                        {
                            @Html.CheckBoxFor(u => u.Active, new { @class = "checkbox", disabled = "disabled", @readonly = "readonly" })
                        }
                        else
                        {
                            @Html.CheckBoxFor(u => u.Active, new { @class = "checkbox" })
                        }
                    }
                    else
                    {
                        @Html.CheckBoxFor(u => u.Active, new { @class = "checkbox", @checked = "checked" })
                    }
                </p>
                @if (Model != null && Model.IsLockedOut)
                {
                    <p class="inline-label">
                        <label for="IsLockedOut" class="label">
                            Locked Out
                        </label>
                        @if (isView)
                        {
                            @Html.CheckBoxFor(u => u.IsLockedOut, new { @class = "checkbox", disabled = "disabled", @readonly = "readonly" })
                        }
                        else
                        {
                            @Html.CheckBoxFor(u => u.IsLockedOut, new { @class = "checkbox" })
                        }
                    </p>
                }
                else
                {

                    @Html.Hidden("IsLockedOut", false)
                }
                <p class="inline-label">
                    <label for="LastActivityDate" class="label">
                        Last Activity Date
                    </label>
                    @Html.DisplayFor(u => u.LastActivityDate, new { @class = "input full-width2 " })
                </p>
                <p class="inline-label">
                    <label for="LastUpdated" class="label">
                        Last Updated
                    </label>
                    @Html.DisplayFor(u => u.ModifiedBy)
                    @Html.DisplayFor(u => u.LastUpdated)
                </p>
                @Html.HiddenFor(u => u.ID)
                <div class="field-block button-height">
                    @if (@ViewData["mode"].ToString() != "view")
                    {
                        <button id="btnAddUser" class="button green-gradient glossy float-right mid-margin-left"
                                type="submit">
                            @if (isEdit)
                            {
                                @Html.Raw("Update")
                            }
                            else
                            {
                                @Html.Raw("Add")
                            }
                        </button>
                    }
                    <button id="btnCancelUser" class="button gray-gradient glossy  float-right" type="button">
                        Cancel
                    </button>
                </div>
            </div>
        </fieldset>
    </div>
    @Html.Hidden("hdnfldMode", ViewData["mode"])
</form>
<script type="text/javascript">
    $(function () {
        CleanMyContainer('form-UserRegistration');
        WatchMyContainer('form-UserRegistration');
        $("#form-UserRegistration").validationEngine();


    });
</script>
<script type="text/javascript">
    $(function () {
        var title = $('#ID').val();
        if (title != '') {
            $(".t-window-title").html("User ID : " + title);
        }

        @*$("#Pin").val('@userPin');*@
    });
</script>
