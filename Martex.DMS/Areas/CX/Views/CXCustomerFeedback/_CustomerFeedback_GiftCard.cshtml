@using Kendo.Mvc.UI
@{
    var customerFeedbackId = ViewData["CustomerFeedBackId"].ToString();

}
<script type="text/javascript">
  function ManageCustomerFeedbackGiftCard(e) {
    if (e != null) {
      e.preventDefault();
      var customerFeedbackGiftCardId = this.dataItem($(e.currentTarget).closest("tr")).ID;

      if (e.data.commandName == 'Edit') {
        OpenAddCustomerFeedbackGiftCard(customerFeedbackGiftCardId, '@customerFeedbackId', 'edit', 'Edit Gift Card');
      }
      else if (e.data.commandName == 'Delete') {
        DeleteCustomerFeedbackGiftCard(customerFeedbackGiftCardId);
      }
    }
    else {
      OpenAddCustomerFeedbackGiftCard(customerFeedbackGiftCardId, '@customerFeedbackId', 'add', 'Add Gift Card');
    }
  }

  function DeleteCustomerFeedbackGiftCard(customerFeedbackGiftCardId) {
    $.modal.confirm('Are you sure you want to delete this gift card?', function () {
      $.ajax({
        type: 'POST',
        url: '@Url.Action("DeleteCustomerFeedbackGiftCard", "CXCustomerFeedback", new { area = "CX" })',
        traditional: true,
        cache: false,
        data: { customerFeedbackGiftCardId: customerFeedbackGiftCardId },
        async: false,
        success: function (msg) {
          $("#GrdCustomerFeedbackGiftCard_@customerFeedbackId").data('kendoGrid').dataSource.read();
          openAlertMessage('Customer feedback gift card has been deleted successfully');
        }
      });
    }, function () {

    });
  }

  function ManageCustomerFeedbackGiftCard_Databound(e) {
    $(".k-grid-Edit").addClass("with-tooltip").html("<span class='k-icon k-edit'/>");
    $(".k-grid-Delete").addClass("with-tooltip").html("<span class='k-icon k-delete'/>");
  }
</script>

<div class="with-padding">
  <div class="columns">
    <div class="twelve-columns">
      @(Html.Kendo().Grid<Martex.DMS.DAL.CustomerFeedbackGiftCard_Result>()
                .Name("GrdCustomerFeedbackGiftCard_" + customerFeedbackId)
                .Columns(column =>
                {
                  column.Bound(c => c.ID).Hidden();
                  column.Bound(c => c.CardNumber).Title("Number").Width(100);
                  column.Bound(c => c.CardAmount).Title("Amount").Format("{0:c2}").Width(100);
                  column.Bound(c => c.RequestedBy).Title("Requested By").Width(100);
                  column.Bound(c => c.CardSentDate).Title("Sent Date").Format("{0:MM/dd/yyyy}").Width(100);

                  column.Command(command =>
                  {
                    command.Custom("Edit").Click("ManageCustomerFeedbackGiftCard").HtmlAttributes(new { style = "min-width:auto;", title = "Edit" });
                    command.Custom("Delete").Click("ManageCustomerFeedbackGiftCard").HtmlAttributes(new { style = "min-width:auto;", title = "Delete" });
                  })
                  .Width(40)
                  .Title("Action(s)");
                })
                .ToolBar(toolBar => toolBar.Template("<a style = 'min-width:auto;', title='Add Gift Card' , class='k-button k-button-icontext k-grid-add with-tooltip' href='javascript:void(0);' onclick='ManageCustomerFeedbackGiftCard(null)'><span class='k-icon k-add'></span>&nbsp;<label class='label'>Add Gift Card</label></a>"))
                .Events(e =>
                {
                  e.DataBound("ManageCustomerFeedbackGiftCard_Databound");
                })
                .Pageable()
                .Sortable()
                .Scrollable(s => s.Height(200))
                .Filterable(filterable => filterable
                    .Enabled(false)
                )
                .Pageable(pager => pager
                    .Refresh(true)
                  .PageSizes(new int[] { 10, 20, 50, 100 })

                )
                .Selectable(select => select.Mode(GridSelectionMode.Multiple))
                .DataSource(datasource => datasource
                    .Ajax()
                    .PageSize(10)
                    .Events(events => events.Error("KendoGridErrorHandler"))
                    .Read(read => read.Action("CustomerFeedbackGiftCardList", "CXCustomerFeedback", new { area = "CX", customerFeedbackId = customerFeedbackId }))
               )
                .Resizable(resize => resize.Columns(true))

      )
    </div>
  </div>
</div>


<script type="text/javascript">
  function OpenAddCustomerFeedbackGiftCard(customerFeedbackGiftCardId, customerFeedbackId, mode, title) {
    $.ajax({
      type: 'POST',
      url: '@Url.Action("ShowAddEditCustomerFeedbackGiftCard", "CXCustomerFeedback")',
      traditional: true,
      data: { customerFeedbackGiftCardId: parseInt(customerFeedbackGiftCardId), customerFeedbackId: parseInt(customerFeedbackId), mode: mode },
      cache: false,
      async: false,
      success: function (msg) {
        customerFeedbackGiftCardWindow = $("<div id='divAddEditCustomerFeedbackGiftCard' />").appendTo(document.body);
        customerFeedbackGiftCardWindow.kendoWindow({
          title: title,
          modal: true,
          width: 600  ,
          height: GetPopupWindowHeight(),
          deactivate: function () {
            CleanMyContainer('formAddEditCustomerFeedbackGiftCard_' + customerFeedbackId);
            this.destroy();
          },
          close: function (e) {
            //$('#formAddEditCustomerFeedbackGiftCard_').validationEngine('hideAll'); // to hide the validation message of the popup
            if (document.dialogResult == null || document.dialogResult == "CANCEL") {
              document.dialogResult = null;
              if (IsMyContainerDirty('formAddEditCustomerFeedbackGiftCard_' + customerFeedbackId)) {
                var prompt = PromptForDirtyFlag();
                if (!prompt) {
                  e.preventDefault();
                  return false;
                }
                CleanMyContainer('formAddEditCustomerFeedbackGiftCard_' + customerFeedbackId);
              }
            }
            return true;
          }
        });
        customerFeedbackGiftCardWindow.data('kendoWindow').content(msg).center().open();
      }
    });
  }  
</script>