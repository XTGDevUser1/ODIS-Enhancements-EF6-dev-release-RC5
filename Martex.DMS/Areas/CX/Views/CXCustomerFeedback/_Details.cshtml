@model Martex.DMS.DAL.Entities.CustomerFeedbackModel
@using Martex.DMS.Areas.Application.Models;
@{
    string showAllButtons = DMSSecurityProvider.GetAccessType(DMSSecurityProviderFriendlyName.ALLOW_UNLOCK_AND_OPEN_CUSTOMER_FEEDBACK) == Martex.DMS.Areas.Application.Models.AccessType.ReadWrite ? "ALL" : "OnlyOK";
}
<style type="text/css">
    .modal-actions {
        display: none;
    }
</style>
@using Kendo.Mvc.UI;
@{
    //string suffixCustomerFeedbackID = Model.CustomerFeedback.ID.ToString();
    string suffixCustomerFeedbackID = string.IsNullOrEmpty(Convert.ToString(Model.CustomerFeedback.ID)) ? "0" : Convert.ToString(Model.CustomerFeedback.ID);
}
<div class="with-padding">
    <div class="columns">
        <div class="eleven-columns">
            @if (Model.CustomerFeedback.ID == 0)
            {
                @Html.Partial("_ValidateCustomerFeedback", suffixCustomerFeedbackID)
            }
        </div>
        <div class="one-columns" style="float: right;">
            <div style="min-height: 25px; margin: 5px;" id="divCustomerFeedbackDetails_@suffixCustomerFeedbackID">
                <div style="display: inline-block; vertical-align: top; float: right;">
                    <a href="javascript:void(0)" class="with-tooltip" title="Close" onclick="CancelCustomerFeedbackInformation_('@suffixCustomerFeedbackID');">
                        X
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="with-padding">
    <div id="frmCustomerFeedbackContainerForDirtyFlag_@suffixCustomerFeedbackID">
        <div id="CustomerFeedbackContainer_@suffixCustomerFeedbackID">
            @Html.Partial("_QATabs", Model)
        </div>
    </div>
</div>
<script type="text/javascript">
  $(function () {
    if ('@Model.IsRecordLocked.ToString().ToLower()' == "true") {

      if ('@showAllButtons' == 'OnlyOK') {
        openAlertMessage("Record is locked by " + '@Model.RecordLockedBy');
      }
      else {

        $.modal.confirmOkUnlockOpen("Record is locked by " + '@Model.RecordLockedBy', function () {
          //Ok
          deleteGenericTab('@suffixCustomerFeedbackID', tabObject);
          reloadCustomerFeedbackGrd();
        }, function () {
          // update assignto to value Null
          UnlockLockedCutomerfedback('@suffixCustomerFeedbackID');
          reloadCustomerFeedbackGrd();

        }, function () {
          //Update assignto value to curent user
          OpenLockedCustomerfeedback('@suffixCustomerFeedbackID');
        });
      }
    }
    else
    {
      if(@Model.CustomerFeedback.ID > 0 && '@Model.CustomerFeedbackStatusName' == 'Pending')
      {
        showConfirmDialogToWork(@Model.CustomerFeedback.ID, tabObject);
      }
    }

    var fnbuttonHandler = function (sender, routedValues) {

      var buttonHandler = $('#' + routedValues[2].value);
      buttonHandler.show();
    }

    var routedValues = [];
    routedValues.push({ name: "FormName", value: "frmCustomerFeedbackContainerForDirtyFlag_@suffixCustomerFeedbackID" });
    routedValues.push({ name: "RecordID", value: "@suffixCustomerFeedbackID" });
    routedValues.push({ name: "RelatedButtonHandler", value: "btnSaveCustomerFeedbackSection_@suffixCustomerFeedbackID" });

    WatchMyContainer('frmCustomerFeedbackContainerForDirtyFlag_@suffixCustomerFeedbackID', null, fnbuttonHandler, routedValues)
  });

  function reloadCustomerFeedbackGrd()
  {
    $('#GrdQACustomerFeedback').data('kendoGrid').dataSource.read();
  }
  function UnlockLockedCutomerfedback(CustomerFeedbackID) {

    if (CustomerFeedbackID == null || CustomerFeedbackID == '') {
      deleteGenericTab(CustomerFeedbackID, tabObject);
    }
    else {
      $.ajax({
        type: 'POST',
        url: '@Url.Action("UnlockLockedCutomerfedback", "CXCustomerFeedback", new { area = "CX" })',
        data: { CustomerFeedbackID: CustomerFeedbackID },
        traditional: true,
        cache: false,
        async: true,
        success: function (msg) {
          if('@Model.CustomerFeedbackStatusName' == 'Pending')
          {
            showConfirmDialogToWork(@Model.CustomerFeedback.ID, tabObject);
          }
          else
          {
            deleteGenericTab(CustomerFeedbackID, tabObject);
          }
        }
      });
    }

  }


  function OpenLockedCustomerfeedback(CustomerFeedbackID) {
    if (CustomerFeedbackID == null || CustomerFeedbackID == '') {
      deleteGenericTab(CustomerFeedbackID, tabObject);
    }
    else {
      $.ajax({
        type: 'POST',
        url: '@Url.Action("OpenLockedCustomerfeedback", "CXCustomerFeedback", new { area = "CX" })',
        data: { CustomerFeedbackID: CustomerFeedbackID },
        traditional: true,
        cache: false,
        async: true,
        success: function (msg) {
          cancelCustomerFeedbackInformation(CustomerFeedbackID, tabObject);
        }
      });
    }
  }


  function DeleteTab(containerName) {
    if (containerName == null || containerName == '') {
      deleteGenericTab(containerName, tabObject);
    }
    else {
      var recordID = containerName.split('_')[1];
      $.ajax({
        type: 'POST',
        url: '@Url.Action("UnlockRecord", "CXCustomerFeedback", new { area = "CX" })',
        data: { recordID: recordID },
        traditional: true,
        cache: false,
        async: true,
        success: function (msg) {
          deleteGenericTab(containerName, tabObject);
          reloadCustomerFeedbackGrd();
        }
      });
    }
  }

  function updateCustomerFeedbackStatusToOpen(customerFeedBackId, tabObjectReference) {
    $.ajax({
      type: 'POST',
      url: '/CX/CXCustomerFeedback/UpdateCustomerFeedbackStatusToOpen',
      traditional: true,
      data: { customerFeedBackId: customerFeedBackId },
      cache: false,
      ajax: true,
      async: true,
      modal: true,
      success: function (msg) {
        AddCustomerFeedbackTab(customerFeedBackId, tabObjectReference);
      }
    });
  }

  function showConfirmDialogToWork(customerFeedbackId, tabObjectReference)
  {
    $.modal.confirmYesNo("Do you want to work this item?", function () {
      deleteGenericTab(customerFeedbackId, tabObjectReference);
      updateCustomerFeedbackStatusToOpen(customerFeedbackId, tabObjectReference);
    }, function () {
      var containerName = 'frmCustomerFeedbackContainerForDirtyFlag_' + customerFeedbackId;
      CancelCustomerFeedbackInformation_(customerFeedbackId);  
    });
  }
</script>