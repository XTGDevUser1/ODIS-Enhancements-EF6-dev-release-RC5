@model ClientPortal.Models.RegisterUserModel
@using Kendo.Mvc.UI
@using Kendo.Mvc.UI;
@{
    ViewBag.Title = "User";
    Layout = "~/Views/Shared/_PopupMaster.cshtml";
    bool isEdit = false;
    bool isView = false;
    if (ViewData["mode"].ToString().Equals("edit") || ViewData["mode"].ToString().Equals("view"))
    {
        isEdit = true;
        if (ViewData["mode"].ToString().Equals("view"))
        {
            isView = true;
        }
    }
}
<link href="@Url.Content("~/Content/CustomStyle.css")" rel="stylesheet" type="text/css" />
<link href="@Url.Content("~/css/ui.multiselect.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/js/ui.multiselect.js")" type="text/javascript"></script>
<script src="@Url.Content("~/js/libs/formValidator/jquery.validationEngine.js")" type="text/javascript"></script>
<script type="text/javascript" src="@Url.Content("~/js/CustomJScript.js")"></script>
<script src="@Url.Content("~/js/userRegistration.js")"></script>
<script language="javascript" type="text/javascript">


    function Organization_OnChange_Kendo(e) {
        var combo = $('#OrganizationID').data('kendoComboBox');
        if (!IsUserInputValidForChangeOnKendoCombo(combo)) {
            e.preventDefault();
        }
        if (combo.value() != '') {
            $.ajax({
                type: 'POST',
                url: '@Url.Action("RolesForOrganization", "ReferenceData")',
                data: { controlFor: "SelectedUserRoles", organizationId: combo.value() },
                traditional: true,
                cache: false,
                async: false,
                success: function (msg) {
                    $("#spUserRoles").html(msg);
                }

            });


            $.ajax({
                type: 'POST',
                url: '@Url.Action("DataGroupsForOrganization", "ReferenceData")',
                data: { controlFor: "SelectedDataGroupsID", organizationId: combo.value() },
                traditional: true,
                cache: false,
                async: false,
                success: function (msg) {
                    $("#spDataGroups").html(msg);
                }

            });
        }
    }
</script>
<form method="post" action="" id="form-UserRegistration">
<div class="with-padding-with-panels">
    <fieldset class="fieldset">
        <legend class="legend">User</legend>
        <div>
            <p class="inline-label">
                <label for="UserName" class="label">
                    User Name<span class="spanstar">*</span></label>
                @if (isEdit)
                {
                    if (isView)
                    {
                    @Html.TextBoxFor(u => u.UserName, new { @class = "validate[required,maxSize[256]], input full-width", disabled = "disabled", @readonly = "true" })
                    }
                    else
                    {
                    @Html.TextBoxFor(u => u.UserName, new { @class = "validate[required,maxSize[256]], input full-width", @readonly = "readonly" })
                    }
                }
                else
                {
                    @Html.TextBoxFor(u => u.UserName, new { @class = "validate[required,maxSize[256],noSpace], input full-width", @error_required = "Please type your User name." })
                }
            </p>
            <p class="inline-label">
                <label for="FirstName" class="label">
                    First Name<span class="spanstar">*</span></label>
                @if (isView)
                {
                    @Html.TextBoxFor(u => u.FirstName, new { @class = "input full-width", disabled = "disabled", @readonly = "readonly" })
                }
                else
                {
                    @Html.TextBoxFor(u => u.FirstName, new { @class = "validate[required,maxSize[50]], input full-width", @error_required = "Please type your first name.", maxlength = 50 })
                }
            </p>
            <p class="inline-label">
                <label for="LastName" class="label">
                    Last Name<span class="spanstar">*</span></label>
                @if (isView)
                {
                    @Html.TextBoxFor(u => u.LastName, new { @class = "input full-width", disabled = "disabled", @readonly = "readonly" })
                }
                else
                {
                    @Html.TextBoxFor(u => u.LastName, new { @class = "validate[required,maxSize[50]], input full-width", @error_required = "Please type your last name.", maxlength = 50 })
                }
            </p>
            <p class="inline-label">
                <label for="Email" class="label">
                    Email<span class="spanstar">*</span></label>
                @if (isView)
                {
                    @Html.TextBoxFor(u => u.Email, new { @class = "validate[required,custom[email],maxSize[256]], input full-width", disabled = "disabled", @readonly = "readonly" })
                }
                else
                {
                    @Html.TextBoxFor(u => u.Email, new { @class = "validate[required,custom[email],maxSize[256]], input full-width", maxlength = 256, @error_required = "Please type your email." })
                }
            </p>
            <p class="inline-label">
                <label for="AgentNumber" class="label">
                    Agent Number<span class="spanstar">*</span></label>
                @if (isView)
                {
                    @Html.TextBoxFor(u => u.AgentNumber, new { @class = "validate[required,maxSize[4]], input full-width", maxlength = 4, disabled = "disabled", @readonly = "readonly" })
                }
                else
                {
                    @Html.TextBoxFor(u => u.AgentNumber, new { @class = "validate[required,maxSize[4]], input full-width", maxlength = 4, @error_required = "Please type agent number." })
                }
            </p>
            <p class="inline-label">
                <label for="PhoneUserID" class="label">
                    Phone UserID</label>
                @if (isView)
                {
                    @Html.TextBoxFor(u => u.PhoneUserId, new { @class = "validate[maxSize[20]], input full-width", disabled = "disabled", @readonly = "readonly" })
                }
                else
                {
                    @Html.TextBoxFor(u => u.PhoneUserId, new { @class = "validate[maxSize[20]], input full-width" })
                }
            </p>
            <p class="inline-label">
                <label for="PhonePassword" class="label">
                    Phone Password</label>
                @if (isView)
                {
                    @Html.TextBoxFor(u => u.PhonePassword, new { @class = "validate[maxSize[20]], input full-width", disabled = "disabled", @readonly = "readonly" })
                }
                else
                {
                    @Html.TextBoxFor(u => u.PhonePassword, new { @class = "validate[maxSize[20]], input full-width" })
                }
            </p>
            <p class="inline-label">
                <div>
                    <label for="OrganizationID" class="label-no-inline">
                        Organization<span class="spanstar">*</span></label>
                    @if (isView)
                    {
                        @(Html.Kendo().ComboBox()
                        .Name("OrganizationID")
                        .Filter(Kendo.Mvc.UI.FilterType.StartsWith).MinLength(0)
                        .Events(events => events.Change("Organization_OnChange_Kendo"))
                        .Suggest(true)
                        .BindTo(new SelectList(ViewData[ClientPortal.ActionFilters.StaticData.Organizations.ToString()] as IEnumerable<SelectListItem>, "Value", "Text", Model != null && Model.OrganizationID != null ? Model.OrganizationID.ToString() : ""))
                        .Enable(false)
                        )
                   
                    }
                    else
                    {
                        
                        @(Html.Kendo().ComboBox()
                        .Name("OrganizationID")
                        .Filter(Kendo.Mvc.UI.FilterType.StartsWith).MinLength(0)
                        .Events(events => events.Change("Organization_OnChange_Kendo"))
                        .Suggest(true)
                            .BindTo(new SelectList(ViewData[ClientPortal.ActionFilters.StaticData.Organizations.ToString()] as IEnumerable<SelectListItem>, "Value", "Text", Model != null && Model.OrganizationID != null ? Model.OrganizationID.ToString() : ""))
                        .SelectedIndex(0)
                        )
                    }
                </div>
            </p>
            <p class="inline-label">
                <label for="UserRoles" class="label">
                    User Roles<span class="spanstar">*</span></label>
                <span id="spUserRoles">
                    @if (isView)
                    {
                        @Html.ListBoxFor(u => u.SelectedUserRoles, ViewData[ClientPortal.ActionFilters.StaticData.UserRoles.ToString()] as IEnumerable<SelectListItem>, new { @class = "validate[required] uimultiselect nine-columns", multiple = true, style = "height:100px;", disabled = "disabled" })
                    }
                    else
                    {
                        @Html.ListBoxFor(u => u.SelectedUserRoles, ViewData[ClientPortal.ActionFilters.StaticData.UserRoles.ToString()] as IEnumerable<SelectListItem>, new { @class = "validate[required] uimultiselect nine-columns", multiple = true, style = "height:100px;" })
                    }
                </span>
            </p>
            <p class="inline-label">
                <label for="DataGroups" class="label">
                    Data Groups</label>
                <span id="spDataGroups">
                    @if (isView)
                    {
                        @Html.ListBoxFor(u => u.SelectedDataGroupsID, ViewData[ClientPortal.ActionFilters.StaticData.DataGroups.ToString()] as IEnumerable<SelectListItem>, new { @class = "uimultiselect nine-columns", style = "height:100px;", disabled = "disabled", multiple = true })
                    }
                    else
                    {
                        @Html.ListBoxFor(u => u.SelectedDataGroupsID, ViewData[ClientPortal.ActionFilters.StaticData.DataGroups.ToString()] as IEnumerable<SelectListItem>, new { @class = "uimultiselect nine-columns", multiple = true, style = "height:100px;" })
                    }
                </span>
            </p>
            <p class="inline-label">
                <label for="Password" class="label">
                    Password<span class="spanstar">*</span> <span class="info-spot"><span class="icon-info-round">
                    </span><span class="info-bubble">At least 7 characters.<br />
                        At least 1 special character.<br />
                        For example: ! @@ # $ % ^ & * ( ).<br />
                        Password is case sensitive.</span></span>
                </label>
                @if (isView)
                {
                    @Html.PasswordFor(u => u.Password, new { @class = "input full-width float-left", @id = "register_Password", disabled = "disabled", @readonly = "readonly" })
                }
                else if (isEdit)
                {
                    @Html.PasswordFor(u => u.Password, new { @class = "validate[maxSize[128]], input full-width float-left", maxlength = 128, @id = "register_Password", @error_required = "Please type your password." })
                }
                else
                {
                    @Html.PasswordFor(u => u.Password, new { @class = "validate[required,maxSize[128]], input full-width float-left", maxlength = 128, @id = "register_Password", @error_required = "Please type your password." })
                }
                @*<img src="/img/help.png" class="with-tooltip tooltip-right small-margin-left" alt="Help" title="At least 7 characters.<br/>At least 1 special character.<br/>For example: ! @@ # $ % ^ & * ( ).<br/>Password is case sensitive.
" />*@
            </p>
            <p class="inline-label">
                <label for="ConfirmPassword" class="label">
                    Confirm Password<span class="spanstar">*</span> <span class="info-spot"><span class="icon-info-round">
                    </span><span class="info-bubble">At least 7 characters.<br />
                        At least 1 special character.<br />
                        For example: ! @@ # $ % ^ & * ( ).<br />
                        Password is case sensitive.</span></span>
                </label>
                @if (isView)
                {
                    @Html.PasswordFor(u => u.ConfirmPassword, new { @class = "validate[required,maxSize[128],equals[register_Password]], input full-width float-left", disabled = "disabled", @readonly = "readonly" })
                }
                else if (isEdit)
                {
                    @Html.PasswordFor(u => u.ConfirmPassword, new { @class = "validate[maxSize[128],equals[register_Password]], input full-width float-left", maxlength = 128, @error_required = "Please type your confirm password." })
                }
                else
                {
                    @Html.PasswordFor(u => u.ConfirmPassword, new { @class = "validate[required,maxSize[128],equals[register_Password]], input full-width float-left", maxlength = 128, @error_required = "Please type your confirm password." })
                }
                @*<img src="/img/help.png" class="with-tooltip tooltip-right small-margin-left" alt="Help" title="At least 7 characters.<br/>At least 1 special character.<br/>For example: ! @@ # $ % ^ & * ( )<br/>Password is case sensitive.
" />*@
            </p>
            <p class="inline-label">
                <label for="Active" class="label">
                    Active</label>
                @if (isEdit)
                {
                    if (isView)
                    {
                    @Html.CheckBoxFor(u => u.Active, new { @class = "checkbox", disabled = "disabled", @readonly = "readonly" })
                    }
                    else
                    {
                    @Html.CheckBoxFor(u => u.Active, new { @class = "checkbox" })
                    }
                }
                else
                {
                    @Html.CheckBoxFor(u => u.Active, new { @class = "checkbox", @checked = "checked" })
                }
            </p>
            <p class="inline-label">
                <label for="LastActivityDate" class="label">
                    Last Activity Date</label>
                @Html.DisplayFor(u => u.LastActivityDate, new { @class = "input full-width " })
            </p>
            <p class="inline-label">
                <label for="LastUpdated" class="label">
                    Last Updated</label>
                @Html.DisplayFor(u => u.ModifiedBy)
                @Html.DisplayFor(u => u.LastUpdated)
            </p>
            @Html.HiddenFor(u => u.ID)
            <div class="field-block button-height">
                @if (@ViewData["mode"].ToString() != "view")
                {
                    <button id="btnAddUser" class="button green-gradient glossy float-right mid-margin-left"
                        type="submit">
                        @if (isEdit)
                        {
                            @Html.Raw("Update")
                        }
                        else
                        {
                            @Html.Raw("Add")
                        }
                    </button>
                }
                <button id="btnCancelUser" class="button gray-gradient glossy  float-right" type="button">
                    Cancel
                </button>
            </div>
        </div>
    </fieldset>
</div>
@Html.Hidden("hdnfldMode", ViewData["mode"])
</form>
<script type="text/javascript">
    $(function () {
        //        if ($('#hdnfldMode').val() == "view") {
        //            $('#UserName').attr("disabled", "disabled");
        //            $('#FirstName').attr("disabled", "disabled");
        //            $('#LastName').attr("disabled", "disabled");
        //            $('#Email').attr("disabled", "disabled");
        //            $('#Registration_OrganizationID').attr("disabled", "disabled");
        //            //$('#SelectedUserRoles').attr("disabled", "disabled");
        //            //$('#SelectedDataGroupsID').attr("disabled", "disabled");
        //            $('#register_Password').attr("disabled", "disable");
        //            $('#ConfirmPassword').attr("disabled", "disabled");
        //            $('#Active').attr("disabled", "disabled"); 
        //        }
        $("input,textarea,select").change(function (e) {
            isdirty = true;
        });


        $("#form-UserRegistration").validationEngine();


    });
</script>
<script type="text/javascript">
    $(function () {
        var title = $('#ID').val();
        if (title != '') {
            $(".t-window-title").html("User ID : " + title);
        }
    });
</script>
